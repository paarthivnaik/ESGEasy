using ESG.Application.Common.Interface;
using ESG.Domain.Common;
using ESG.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using System.Text;

namespace ESG.Infrastructure.Persistence
{
    public class ApplicationDbContext : DbContext, IApplicationDbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
            _curretDateTime = DateTime.UtcNow;
        }
        public DbSet<Tenant> Tenants { get; set; }
        public DbSet<Organization> Organizations { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<OrganizationUser> OrganizationUsers { get; set; }
        public DbSet<UnitOfMeasure> UnitOfMeasures { get; set; }
        public DbSet<UnitOfMeasureTranslations> UnitOfMeasureTranslations{ get; set; }
        public DbSet<UnitOfMeasureType> UnitOfMeasureTypes { get; set; }
        public DbSet<UnitOfMeasureTypeTranslations> UnitOfMeasureTypeTranslations { get; set; }
        public DbSet<Language> Languages { get; set; }
        public DbSet<Currency> Currency { get; set; }
        public DbSet<DimensionType> DimensionTypes { get; set; }
        public DbSet<ESG.Domain.Entities.Dimensions> Dimensions { get; set; }
        public DbSet<DataPointTypes> DataPointTypes { get; set; }
        public DbSet<DatapointTypeTranslations> DatapointTypeTranslations { get; set; }
        public DbSet<DataPointValues> DataPointValues { get; set; }
        public DbSet<DatapointValueTranslations> DatapointValueTranslations { get; set; }
        public DbSet<DimensionTypeTranslations> DimensionTypeTranslations { get; set; }
        public DbSet<DimensionTranslations> DimensionTranslations { get; set; }
        public DbSet<Audit> AuditLogs { get; set; }
        public DbSet<Hierarchy> Hierarchy { get; set; }
        public DateTime _curretDateTime { get; set; }

        public async Task<int> SaveChangesAsync()
        {

            try
            {
                var auditEntries = OnBeforeSaveChanges();
                var result = await base.SaveChangesAsync();
                await OnAfterSaveChanges(auditEntries);
                return result;
            }
            catch (DbUpdateException ex)
            {
                // Log the exception or inspect the inner exception
                Console.WriteLine(ex.InnerException?.Message);
                throw;
            }
        }
        public virtual new DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            return base.Set<TEntity>();
        }
        private List<AuditEntry> OnBeforeSaveChanges()
        {


            foreach (var entity in ChangeTracker.Entries<IAuditableEntity>())
            {
                switch (entity.State)
                {
                    case EntityState.Added:
                        //entity.Entity.CreatedBy = 1;//GetCurrentUser
                        entity.Entity.CreatedDate = _curretDateTime;
                        entity.Entity.LastModifiedBy = 1;
                        entity.Entity.LastModifiedDate = _curretDateTime;
                        break;
                    case EntityState.Modified:
                        entity.Entity.LastModifiedBy = 1;
                        entity.Entity.LastModifiedDate = _curretDateTime;
                        break;
                }
            }


            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;
                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Entity.GetType().Name;
                auditEntry.CreatedBy = 1;//GetCurrentUser

                auditEntries.Add(auditEntry);
                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }
                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.AuditType = AuditType.Create;
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.AuditType = AuditType.Delete;
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.ChangedColumns.Add(propertyName);
                                auditEntry.AuditType = AuditType.Update;
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                AuditLogs.Add(auditEntry.ToAudit());
            }
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }
        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                AuditLogs.Add(auditEntry.ToAudit());
            }

            return SaveChangesAsync();
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfigurationsFromAssembly(typeof(ApplicationDbContext).Assembly);
            modelBuilder.Entity<Language>().HasData(
                new Language { Id = 1, Name = "English", IsoCode = "en" },
                new Language { Id = 2, Name = "French", IsoCode = "fr" },
                new Language { Id = 3, Name = "Belarusian", IsoCode = "be" },
                new Language { Id = 4, Name = "Estonian", IsoCode = "et" },
                new Language { Id = 5, Name = "Latvian", IsoCode = "lv" },
                new Language { Id = 6, Name = "Lithuanian", IsoCode = "lt" },
                new Language { Id = 7, Name = "Georgian", IsoCode = "ka" },
                new Language { Id = 8, Name = "Armenian", IsoCode = "hy" },
                new Language { Id = 9, Name = "Azerbaijani", IsoCode = "az" },
                new Language { Id = 10, Name = "Kazakh", IsoCode = "kk" },
                new Language { Id = 11, Name = "Uzbek", IsoCode = "uz" },
                new Language { Id = 12, Name = "Turkmen", IsoCode = "tk" },
                new Language { Id = 13, Name = "Tajik", IsoCode = "tg" },
                new Language { Id = 14, Name = "Kyrgyz", IsoCode = "ky" },
                new Language { Id = 15, Name = "Moldovan", IsoCode = "mo" },
                new Language { Id = 16, Name = "Tatar", IsoCode = "tt" },
                new Language { Id = 17, Name = "Bashkir", IsoCode = "ba" });

            modelBuilder.Entity<Currency>().HasData(
                new Currency { Id = 1, Name = "US Dollar", CurrencyCode = "USD", ShortText = "USD", LongText = "United States Dollar" },
                new Currency { Id = 2, Name = "Euro", CurrencyCode = "EUR", ShortText = "EUR", LongText = "Euro" },
                new Currency { Id = 3, Name = "Indian Rupee", CurrencyCode = "INR", ShortText = "INR", LongText = "Indian Rupee" },
                new Currency { Id = 4, Name = "British Pound", CurrencyCode = "GBP", ShortText = "GBP", LongText = "British Pound Sterling" },
                new Currency { Id = 5, Name = "Canadian Dollar", CurrencyCode = "CAD", ShortText = "CAD", LongText = "Canadian Dollar" },
                new Currency { Id = 6, Name = "Australian Dollar", CurrencyCode = "AUD", ShortText = "AUD", LongText = "Australian Dollar" },
                new Currency { Id = 7, Name = "Japanese Yen", CurrencyCode = "JPY", ShortText = "JPY", LongText = "Japanese Yen" },
                new Currency { Id = 8, Name = "Swiss Franc", CurrencyCode = "CHF", ShortText = "CHF", LongText = "Swiss Franc" },
                new Currency { Id = 9, Name = "Chinese Yuan", CurrencyCode = "CNY", ShortText = "CNY", LongText = "Chinese Yuan Renminbi" },
                new Currency { Id = 10, Name = "Russian Ruble", CurrencyCode = "RUB", ShortText = "RUB", LongText = "Russian Ruble" }
               );
            modelBuilder.Entity<Tenant>().HasData(
            new Tenant { Id = 1, Name = "ESG Global" });

            modelBuilder.Entity<Organization>().HasData(
                   new Organization
                   {
                       Id = 1,
                       Name = "ESG Global",
                       RegistrationId = "REG-001",
                       FirstName = "John",
                       LatsName = "Doe",
                       StreetAddress = "123 Main St",
                       StreetNumber = "456",
                       PostalCode = "12345",
                       Country = "USA",
                       Email = "john.doe@org1.com",
                       TenantId = 1,
                       LanguageId = 1
                   });
                        modelBuilder.Entity<User>().HasData(
                new User
                {
                    Id = 1,
                    Password = Encoding.UTF8.GetBytes("password1"),
                    SecurityStamp = Guid.NewGuid(),
                    Email = "user1@example.com",
                    FirstName = "John",
                    LastName = "Doe",
                    LanguageId = 1,
                    PhoneNumber = "1234567890",
                    CreatedBy = 1,
                    CreatedDate = DateTime.UtcNow
                },
                new User
                {
                    Id = 2,
                    Password = Encoding.UTF8.GetBytes("password2"),
                    SecurityStamp = Guid.NewGuid(),
                    Email = "user2@example.com",
                    FirstName = "Jane",
                    LastName = "Smith",
                    LanguageId = 1,
                    PhoneNumber = "0987654321",
                    CreatedBy = 1,
                    CreatedDate = DateTime.UtcNow
                },
                new User
                {
                    Id = 3,
                    Password = Encoding.UTF8.GetBytes("password3"),
                    SecurityStamp = Guid.NewGuid(),
                    Email = "user3@example.com",
                    FirstName = "Alice",
                    LastName = "Johnson",
                    LanguageId = 1,
                    PhoneNumber = "2345678901",
                    CreatedBy = 1,
                    CreatedDate = DateTime.UtcNow
                });
            modelBuilder.Entity<Role>().HasData(
                new Role { Id = 1, Name = "AdminEE" },
                new Role { Id = 2, Name = "ClientAdmin" },
                new Role { Id = 3, Name = "User" });

            modelBuilder.Entity<OrganizationUser>().HasData(
               new OrganizationUser { Id = 1, OrganizationId = 1, UserId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
               new OrganizationUser { Id = 2, OrganizationId = 1, UserId = 2, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
               new OrganizationUser { Id = 3, OrganizationId = 1, UserId = 3, CreatedBy = 1, CreatedDate = DateTime.UtcNow }
               );
            modelBuilder.Entity<UserRole>().HasData(
                 new UserRole { Id = 1, RoleId = 1, UserId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                 new UserRole { Id = 2, RoleId = 2, UserId = 2, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                 new UserRole { Id = 3, RoleId = 3, UserId = 3, CreatedBy = 1, CreatedDate = DateTime.UtcNow }
                  );

            modelBuilder.Entity<UnitOfMeasureType>().HasData(
                 new UnitOfMeasureType { Id = 1, Code = "acidbasecapacity", Name = "Acid/Base capacity", ShortText = "Acid/Base capacity", LongText = "", OrganizationId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1, LanguageId = 1 },
                 new UnitOfMeasureType { Id = 2, Code = "area", Name = "Area", ShortText = "Area", LongText = "", OrganizationId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1, LanguageId = 1 },
                 new UnitOfMeasureType { Id = 3, Code = "density", Name = "Density", ShortText = "Density", LongText = "", OrganizationId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1, LanguageId = 1 },
                 new UnitOfMeasureType { Id = 4, Code = "time", Name = "Time", ShortText = "Time", LongText = "", OrganizationId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1, LanguageId = 1 }
                   );
            modelBuilder.Entity<UnitOfMeasure>().HasData(
                new UnitOfMeasure { Id = 101, Name = "time", Code = "hh", ShortText = "Hr", LongText = "Hour", UnitOfMeasureTypeId = 4, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 102, Name = "time", Code = "mm", ShortText = "Min", LongText = "Minute", UnitOfMeasureTypeId = 4, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 103, Name = "time", Code = "ss", ShortText = "Sec", LongText = "Second", UnitOfMeasureTypeId = 4, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 104, Name = "time", Code = "d", ShortText = "Day", LongText = "Day", UnitOfMeasureTypeId = 4, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 105, Name = "time", Code = "m", ShortText = "Month", LongText = "Month", UnitOfMeasureTypeId = 4, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 106, Name = "time", Code = "q", ShortText = "Qrtr", LongText = "Quarter", UnitOfMeasureTypeId = 4, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 107, Name = "time", Code = "y", ShortText = "Year", LongText = "Year", UnitOfMeasureTypeId = 4, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 108, Name = "acidbasecapacity", Code = "mMol/l", ShortText = "mMol/l", LongText = "Millimol per liter", UnitOfMeasureTypeId = 1, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 109, Name = "acidbasecapacity", Code = "Mol/m3", ShortText = "Mol/m3", LongText = "Mol per cubic meter", UnitOfMeasureTypeId = 1, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 110, Name = "acidbasecapacity", Code = "Mol/l", ShortText = "Mol/l", LongText = "Mol per liter", UnitOfMeasureTypeId = 1, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 111, Name = "area", Code = "acre", ShortText = "Acre", LongText = "Acre", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 112, Name = "area", Code = "ha", ShortText = "Ha", LongText = "Hectare", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 113, Name = "area", Code = "yd2", ShortText = "Yd2", LongText = "Square Yard", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 114, Name = "area", Code = "cm2", ShortText = "Cm2", LongText = "Square centimeter", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 115, Name = "area", Code = "ft2", ShortText = "Ft2", LongText = "Square foot", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 116, Name = "area", Code = "Inch2", ShortText = "Inch2", LongText = "Square inch", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 117, Name = "area", Code = "km2", ShortText = "Km2", LongText = "Square kilometer", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 118, Name = "area", Code = "m2", ShortText = "M2", LongText = "Square meter", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 119, Name = "area", Code = "Mile2", ShortText = "Mile2", LongText = "Square mile", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 120, Name = "area", Code = "mm2", ShortText = "Mm2", LongText = "Square millimeter", UnitOfMeasureTypeId = 2, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 121, Name = "density", Code = "g/m3", ShortText = "G/M3", LongText = "Gram/Cubic meter", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 122, Name = "density", Code = "g/cm3", ShortText = "G/Cm3", LongText = "Gram/cubic centimeter", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 123, Name = "density", Code = "g/l", ShortText = "G/L", LongText = "Gram/liter", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 124, Name = "density", Code = "kg/scf", ShortText = "Kg/Scf", LongText = "Kilogram/Standard Cubic Foot", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 125, Name = "density", Code = "kg/bbl", ShortText = "Kg/Bbl", LongText = "Kilogram/US Barrel", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 126, Name = "density", Code = "kg/dm3", ShortText = "Kg/Dm3", LongText = "Kilogram/cubic decimeter", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 127, Name = "density", Code = "kg/m3", ShortText = "Kg/M3", LongText = "Kilogram/cubic meter", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 128, Name = "density", Code = "µg/m3", ShortText = "µg/M3", LongText = "Microgram/cubic meter", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 129, Name = "density", Code = "µg/l", ShortText = "µg/L", LongText = "Microgram/liter", UnitOfMeasureTypeId = 3, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasure { Id = 130, Name = "density", Code = "mg/m3", ShortText = "Mg/M3", LongText = "Milligram/cubic meter", UnitOfMeasureTypeId = 4, LanguageId = 1, OrganizationId = 1, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 }
                 );
            modelBuilder.Entity<UnitOfMeasureTranslations>().HasData(
                 new UnitOfMeasureTranslations { Id = 1, Name = "Hour", ShortText = "Hr", LongText = "Hour", UnitOfMeasureId = 101, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 2, Name = "Minute", ShortText = "Min", LongText = "Minute", UnitOfMeasureId = 102, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 3, Name = "Second", ShortText = "Sec", LongText = "Second", UnitOfMeasureId = 103, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 4, Name = "Day", ShortText = "Day", LongText = "Day", UnitOfMeasureId = 104, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 5, Name = "Month", ShortText = "Month", LongText = "Month", UnitOfMeasureId = 105, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 6, Name = "Quarter", ShortText = "Qrtr", LongText = "Quarter", UnitOfMeasureId = 106, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 7, Name = "Year", ShortText = "Year", LongText = "Year", UnitOfMeasureId = 107, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 8, Name = "Millimol per liter", ShortText = "mMol/l", LongText = "Millimol per liter", UnitOfMeasureId = 108, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 9, Name = "Mol per cubic meter", ShortText = "Mol/m3", LongText = "Mol per cubic meter", UnitOfMeasureId = 109, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 10, Name = "Mol per liter", ShortText = "Mol/l", LongText = "Mol per liter", UnitOfMeasureId = 110, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 11, Name = "Acre", ShortText = "Acre", LongText = "Acre", UnitOfMeasureId = 111, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 12, Name = "Hectare", ShortText = "Ha", LongText = "Hectare", UnitOfMeasureId = 112, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 13, Name = "Square Yard", ShortText = "Yd2", LongText = "Square Yard", UnitOfMeasureId = 113, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 14, Name = "Square centimeter", ShortText = "Cm2", LongText = "Square centimeter", UnitOfMeasureId = 114, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 15, Name = "Square foot", ShortText = "Ft2", LongText = "Square foot", UnitOfMeasureId = 115, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 16, Name = "Square inch", ShortText = "Inch2", LongText = "Square inch", UnitOfMeasureId = 116, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 17, Name = "Square kilometer", ShortText = "Km2", LongText = "Square kilometer", UnitOfMeasureId = 117, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 18, Name = "Square meter", ShortText = "M2", LongText = "Square meter", UnitOfMeasureId = 118, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 19, Name = "Square mile", ShortText = "Mile2", LongText = "Square mile", UnitOfMeasureId = 119, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 20, Name = "Square millimeter", ShortText = "Mm2", LongText = "Square millimeter", UnitOfMeasureId = 120, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 21, Name = "Gram/Cubic meter", ShortText = "G/M3", LongText = "Gram/Cubic meter", UnitOfMeasureId = 121, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 22, Name = "Gram/cubic centimeter", ShortText = "G/Cm3", LongText = "Gram/cubic centimeter", UnitOfMeasureId = 122, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 23, Name = "Gram/liter", ShortText = "G/L", LongText = "Gram/liter", UnitOfMeasureId = 123, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 24, Name = "Kilogram/Standard Cubic Foot", ShortText = "Kg/Scf", LongText = "Kilogram/Standard Cubic Foot", UnitOfMeasureId = 124, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 25, Name = "Kilogram/US Barrel", ShortText = "Kg/Bbl", LongText = "Kilogram/US Barrel", UnitOfMeasureId = 125, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 26, Name = "Kilogram/cubic decimeter", ShortText = "Kg/Dm3", LongText = "Kilogram/cubic decimeter", UnitOfMeasureId = 126, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 27, Name = "Kilogram/cubic meter", ShortText = "Kg/M3", LongText = "Kilogram/cubic meter", UnitOfMeasureId = 127, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 28, Name = "Microgram/cubic meter", ShortText = "µg/M3", LongText = "Microgram/cubic meter", UnitOfMeasureId = 128, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 29, Name = "Microgram/liter", ShortText = "µg/L", LongText = "Microgram/liter", UnitOfMeasureId = 129, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                 new UnitOfMeasureTranslations { Id = 30, Name = "Milligram/cubic meter", ShortText = "Mg/M3", LongText = "Milligram/cubic meter", UnitOfMeasureId = 130, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 }
             );
            modelBuilder.Entity<UnitOfMeasureTypeTranslations>().HasData(
                new UnitOfMeasureTypeTranslations { Id = 1, Name = "Acid/Base capacity", ShortText = "Acid/Base capacity", LongText = "Acid/Base capacity", UnitOfMeasureTypeId = 1, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasureTypeTranslations { Id = 2, Name = "Area", ShortText = "Area", LongText = "Area", UnitOfMeasureTypeId = 2, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasureTypeTranslations { Id = 3, Name = "Density", ShortText = "Density", LongText = "Density", UnitOfMeasureTypeId = 3, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 },
                new UnitOfMeasureTypeTranslations { Id = 4, Name = "Time", ShortText = "Time", LongText = "Time", UnitOfMeasureTypeId = 4, LanguageId = 1, State = StateEnum.active, CreatedDate = DateTime.UtcNow, CreatedBy = 1, LastModifiedDate = DateTime.UtcNow, LastModifiedBy = 1 }
            );
            modelBuilder.Entity<DimensionType>().HasData(
                new DimensionType { Id = 1, Name = "ESG Topic", Code = "esg_topic", ShortText = "DimensionType topic", LongText = "Dimension Type 1", LanguageId = 1, isHierarchical = true, OrganizationId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                new DimensionType { Id = 2, Name = "ESG Standard", Code = "esg-standard", ShortText = "dimensiontype standard", LongText = "Dimension Type 2", LanguageId = 1, isHierarchical = true, OrganizationId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                new DimensionType { Id = 3, Name = "ESG Disclosure Requirements", Code = "esg-dq", ShortText = "dimensiontype disclosure requirement", LongText = "Dimension Type 3", LanguageId = 1, isHierarchical = true, OrganizationId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow }
            );
            modelBuilder.Entity<DimensionTypeTranslations>().HasData(
                new DimensionTypeTranslations { Id = 1, Name = "ESG Topic", ShortText = "DimensionType topic", LongText = "Dimension Type 1", DimensionTypeId = 1, LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                new DimensionTypeTranslations { Id = 2, Name = "Sujet ESG", ShortText = "Sujet de type de dimension", LongText = "Type de dimension 1", DimensionTypeId = 1, LanguageId = 2, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                new DimensionTypeTranslations { Id = 3, Name = "ESG Standard", ShortText = "DimensionType standard", LongText = "Dimension Type 2", DimensionTypeId = 2, LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                new DimensionTypeTranslations { Id = 4, Name = "Norme ESG", ShortText = "Norme de type de dimension", LongText = "Type de dimension 2", DimensionTypeId = 2, LanguageId = 2, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                new DimensionTypeTranslations { Id = 5, Name = "ESG Disclosure Requirements", ShortText = "DimensionType disclosure requirement", LongText = "Dimension Type 3", DimensionTypeId = 3, LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
                new DimensionTypeTranslations { Id = 6, Name = "Exigences de divulgation ESG", ShortText = "Exigences de divulgation de type de dimension", LongText = "Type de dimension 3", DimensionTypeId = 3, LanguageId = 2, CreatedBy = 1, CreatedDate = DateTime.UtcNow }
            );
            modelBuilder.Entity<Dimensions>().HasData(
                new Dimensions { Id = 100, Code = "general", Name = "general", ShortText = "general", LongText = "general", LanguageId = 1, DimensionTypeId = 1, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 101, Code = "environment", Name = "environment", ShortText = "environment", LongText = "environment", LanguageId = 1, DimensionTypeId = 1, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 102, Code = "social", Name = "social", ShortText = "social", LongText = "social", LanguageId = 1, DimensionTypeId = 1, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 103, Code = "governance", Name = "governance", ShortText = "governance", LongText = "governance", LanguageId = 1, DimensionTypeId = 1, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 104, Code = "ESRS2_GP", Name = "ESRS2_GP", ShortText = "General principles", LongText = "General principles", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 105, Code = "ESRS2_MDR", Name = "ESRS2_MDR", ShortText = "General disclosures", LongText = "General disclosures", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 106, Code = "E1", Name = "E1", ShortText = "Climate change", LongText = "Climate change", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 107, Code = "E2", Name = "E2", ShortText = "Pollution", LongText = "Pollution", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 108, Code = "E3", Name = "E3", ShortText = "Water & marine resources", LongText = "Water & marine resources", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 109, Code = "E4", Name = "E4", ShortText = "Biodiversity and eco systems", LongText = "Biodiversity and eco systems", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 110, Code = "E5", Name = "E5", ShortText = "Resourtce use and circular economy", LongText = "Resourtce use and circular economy", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 111, Code = "S1", Name = "s1", ShortText = "Own workforce", LongText = "Own workforce", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 112, Code = "S2", Name = "s2", ShortText = "Workers in value chain", LongText = "Workers in value chain", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 113, Code = "S3", Name = "s3", ShortText = "Affected communities", LongText = "Affected communities", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 114, Code = "S4", Name = "s4", ShortText = "Consumers and end-users", LongText = "Consumers and end-users", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 115, Code = "G1", Name = "G1", ShortText = "Business Conduct", LongText = "Business Conduct", LanguageId = 1, DimensionTypeId = 2, isHierarchical = true, OrganizationId = 1 },
                new Dimensions { Id = 116, Code = "BP-1", Name = "BP-1", ShortText = "General basis for preparation of sustainability statements", LongText = "General basis for preparation of sustainability statements", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 117, Code = "BP-2", Name = "BP-2", ShortText = "Disclosures in relation to specific circumstances", LongText = "Disclosures in relation to specific circumstances", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 118, Code = "GOV-1", Name = "GOV-1", ShortText = "The role of the administrative, management and supervisory bodies", LongText = "The role of the administrative, management and supervisory bodies", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 119, Code = "GOV-2", Name = "GOV-2", ShortText = "Information provided to and sustainability matters addressed by the undertaking’s administrative, management and supervisory bodies", LongText = "Information provided to and sustainability matters addressed by the undertaking’s administrative, management and supervisory bodies", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 120, Code = "GOV-3", Name = "GOV-3", ShortText = "Integration of sustainability-related performance in incentive schemes", LongText = "Integration of sustainability-related performance in incentive schemes", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 121, Code = "GOV-4", Name = "GOV-4", ShortText = "Statement on due diligence", LongText = "Statement on due diligence", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 122, Code = "GOV-5", Name = "GOV-5", ShortText = "Risk management and internal controls over sustainability reporting", LongText = "Risk management and internal controls over sustainability reporting", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 123, Code = "SBM-1", Name = "SBM-1", ShortText = "Strategy, business model and value chain", LongText = "Strategy, business model and value chain", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 124, Code = "SBM-2", Name = "SBM-2", ShortText = "Interests and views of stakeholders", LongText = "Interests and views of stakeholders", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 125, Code = "SBM-3", Name = "SBM-3", ShortText = "Material impacts, risks and opportunities and their interaction with strategy and business model", LongText = "Material impacts, risks and opportunities and their interaction with strategy and business model", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 126, Code = "IRO-1", Name = "IRO-1", ShortText = "Description of the process to identify and assess material impacts, risks and opportunities", LongText = "Description of the process to identify and assess material impacts, risks and opportunities", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 127, Code = "IRO-2", Name = "IRO-2", ShortText = "Disclosure requirements in ESRS covered by the undertaking’s sustainability statement", LongText = "Disclosure requirements in ESRS covered by the undertaking’s sustainability statement", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 128, Code = "IRO-3", Name = "IRO-3", ShortText = "Material impacts, risks and opportunities and their interaction with strategy and business model", LongText = "Material impacts, risks and opportunities and their interaction with strategy and business model", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 },
                new Dimensions { Id = 129, Code = "IRO-4", Name = "IRO-4", ShortText = "Material impacts, risks and opportunities in the undertaking’s own operations and value chain", LongText = "Material impacts, risks and opportunities in the undertaking’s own operations and value chain", LanguageId = 1, DimensionTypeId = 3, isHierarchical = false, OrganizationId = 1 }
            );
            modelBuilder.Entity<DimensionTranslations>().HasData(
         new DimensionTranslations { Id = 1, Name = "general", ShortText = "General", LongText = "General", DimensionsId = 100, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 2, Name = "environment", ShortText = "Environment", LongText = "Environment", DimensionsId = 101, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 3, Name = "social", ShortText = "Social", LongText = "Social", DimensionsId = 102, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 4, Name = "governance", ShortText = "Governance", LongText = "Governance", DimensionsId = 103, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 5, Name = "general", ShortText = "Généralités", LongText = "Généralités", DimensionsId = 100, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 6, Name = "environment", ShortText = "Environnement", LongText = "Environnement", DimensionsId = 101, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 7, Name = "social", ShortText = "Social", LongText = "Social", DimensionsId = 102, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 8, Name = "governance", ShortText = "Gouvernance", LongText = "Gouvernance", DimensionsId = 103, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 9, Name = "ESRS2_GP", ShortText = "General principles", LongText = "General principles", DimensionsId = 104, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 10, Name = "ESRS2_MDR", ShortText = "General disclosures", LongText = "General disclosures", DimensionsId = 105, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 11, Name = "E1", ShortText = "Climate change", LongText = "Climate change", DimensionsId = 106, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 12, Name = "E2", ShortText = "Pollution", LongText = "Pollution", DimensionsId = 107, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 13, Name = "E3", ShortText = "Water & marine resources", LongText = "Water & marine resources", DimensionsId = 108, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 14, Name = "E4", ShortText = "Biodiversity and eco systems", LongText = "Biodiversity and eco systems", DimensionsId = 109, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 15, Name = "E5", ShortText = "Resource use and circular economy", LongText = "Resource use and circular economy", DimensionsId = 110, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 16, Name = "S1", ShortText = "Own workforce", LongText = "Own workforce", DimensionsId = 111, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 17, Name = "S2", ShortText = "Workers in value chain", LongText = "Workers in value chain", DimensionsId = 112, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 18, Name = "S3", ShortText = "Affected communities", LongText = "Affected communities", DimensionsId = 113, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 19, Name = "S4", ShortText = "Consumers and end-users", LongText = "Consumers and end-users", DimensionsId = 114, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 20, Name = "G1", ShortText = "Business Conduct", LongText = "Business Conduct", DimensionsId = 115, LanguageId = 1, CreatedBy = 1 },
         new DimensionTranslations { Id = 21, Name = "ESRS2_GP", ShortText = "Principes généraux", LongText = "Principes généraux", DimensionsId = 104, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 22, Name = "ESRS2_MDR", ShortText = "Informations générales", LongText = "Informations générales", DimensionsId = 105, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 23, Name = "E1", ShortText = "Changement climatique", LongText = "Changement climatique", DimensionsId = 106, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 24, Name = "E2", ShortText = "Pollution", LongText = "Pollution", DimensionsId = 107, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 25, Name = "E3", ShortText = "Ressources en eau et marines", LongText = "Ressources en eau et marines", DimensionsId = 108, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 26, Name = "E4", ShortText = "Biodiversité et écosystèmes", LongText = "Biodiversité et écosystèmes", DimensionsId = 109, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 27, Name = "E5", ShortText = "Utilisation des ressources et économie circulaire", LongText = "Utilisation des ressources et économie circulaire", DimensionsId = 110, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 28, Name = "S1", ShortText = "Main-d'œuvre propre", LongText = "Main-d'œuvre propre", DimensionsId = 111, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 29, Name = "S2", ShortText = "Travailleurs dans la chaîne de valeur", LongText = "Travailleurs dans la chaîne de valeur", DimensionsId = 112, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 30, Name = "S3", ShortText = "Communautés affectées", LongText = "Communautés affectées", DimensionsId = 113, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 31, Name = "S4", ShortText = "Consommateurs et utilisateurs finaux", LongText = "Consommateurs et utilisateurs finaux", DimensionsId = 114, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 32, Name = "G1", ShortText = "Conduite des affaires", LongText = "Conduite des affaires", DimensionsId = 115, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 33, Name = "BP-1", ShortText = "Base générale pour la préparation des déclarations de durabilité", LongText = "Base générale pour la préparation des déclarations de durabilité", DimensionsId = 116, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 34, Name = "BP-2", ShortText = "Divulgations concernant des circonstances spécifiques", LongText = "Divulgations concernant des circonstances spécifiques", DimensionsId = 117, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 35, Name = "GOV-1", ShortText = "Le rôle des organes administratifs, de gestion et de surveillance", LongText = "Le rôle des organes administratifs, de gestion et de surveillance", DimensionsId = 118, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 36, Name = "GOV-2", ShortText = "Informations fournies et questions de durabilité traitées par les organes administratifs, de gestion et de surveillance de l’entreprise", LongText = "Informations fournies et questions de durabilité traitées par les organes administratifs, de gestion et de surveillance de l’entreprise", DimensionsId = 119, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 37, Name = "GOV-3", ShortText = "Intégration de la performance liée à la durabilité dans les systèmes de rémunération", LongText = "Intégration de la performance liée à la durabilité dans les systèmes de rémunération", DimensionsId = 120, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 38, Name = "GOV-4", ShortText = "Déclaration sur la diligence raisonnable", LongText = "Déclaration sur la diligence raisonnable", DimensionsId = 121, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 39, Name = "GOV-5", ShortText = "Gestion des risques et contrôles internes sur la déclaration de durabilité", LongText = "Gestion des risques et contrôles internes sur la déclaration de durabilité", DimensionsId = 122, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 40, Name = "SBM-1", ShortText = "Stratégie, modèle économique et chaîne de valeur", LongText = "Stratégie, modèle économique et chaîne de valeur", DimensionsId = 123, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 41, Name = "SBM-2", ShortText = "Intérêts et points de vue des parties prenantes", LongText = "Intérêts et points de vue des parties prenantes", DimensionsId = 124, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 42, Name = "SBM-3", ShortText = "Impacts matériels, risques et opportunités et leur interaction avec la stratégie et le modèle économique", LongText = "Impacts matériels, risques et opportunités et leur interaction avec la stratégie et le modèle économique", DimensionsId = 125, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 43, Name = "IRO-1", ShortText = "Description du processus pour identifier et évaluer les impacts matériels, risques et opportunités", LongText = "Description du processus pour identifier et évaluer les impacts matériels, risques et opportunités", DimensionsId = 126, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 44, Name = "IRO-2", ShortText = "Exigences de divulgation dans les ESRS couvertes par la déclaration de durabilité de l’entreprise", LongText = "Exigences de divulgation dans les ESRS couvertes par la déclaration de durabilité de l’entreprise", DimensionsId = 127, LanguageId = 2, CreatedBy = 1 },
         new DimensionTranslations { Id = 45, Name = "IRO-3", ShortText = "Impacts matériels, risques et opportunités et leur interaction avec la stratégie et le modèle économique", LongText = "Impacts matériels, risques et opportunités et leur interaction avec la stratégie et le modèle économique", DimensionsId = 128, LanguageId = 2, CreatedBy = 1 });


            modelBuilder.Entity<DataPointTypes>().HasData(
    new DataPointTypes { Id = 1, Code = "text",Name = "Table", ShortText = "table", LongText = "table", LanguageId = 1, OrganizationId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
    new DataPointTypes { Id = 2, Code = "narrative", Name = "Narrative", ShortText = "narrative", LongText = "narrative", LanguageId = 1, OrganizationId = 1, CreatedBy = 2, CreatedDate = DateTime.UtcNow }
);
//            modelBuilder.Entity<DatapointTypeTranslations>().HasData(
//    new DatapointTypeTranslations { Id = 101, Name = "Text", ShortText = "T1", LongText = "Type 1", DatapointTypeId = 1, LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
//    new DatapointTypeTranslations { Id = 102, Name = "Text", ShortText = "T1", LongText = "Type 1", DatapointTypeId = 1, LanguageId = 2, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
//    new DatapointTypeTranslations { Id = 103, Name = "Narrative", ShortText = "T2", LongText = "Type 2", DatapointTypeId = 2, LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
//    new DatapointTypeTranslations { Id = 104, Name = "Narrative", ShortText = "T2", LongText = "Type 2", DatapointTypeId = 2, LanguageId = 2, CreatedBy = 1, CreatedDate = DateTime.UtcNow }
//);

            modelBuilder.Entity<DataPointValues>().HasData(
    new DataPointValues { Id = 100, Code = "SBM-1_07", Name = "SBM-1_07", DatapointTypeId = 1, CurrencyId = null, IsNarrative = false, OrganizationId = 1, Purpose = "Purpose 1", LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
    new DataPointValues { Id = 101, Code = "MDR-A_08", Name = "MDR-A_08", DatapointTypeId = 1, CurrencyId = null, IsNarrative = false, OrganizationId = 1, Purpose = "Purpose 2", LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
    new DataPointValues { Id = 102, Code = "E1-8_02", Name = "E1-8_02", DatapointTypeId = 2, CurrencyId = null, IsNarrative = true, OrganizationId = 1, Purpose = "Purpose 3", LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow },
    new DataPointValues { Id = 103, Code = "E1-8_03", Name = "E1-8_03", DatapointTypeId = 2, CurrencyId = null, IsNarrative = true, OrganizationId = 1, Purpose = "Purpose 4", LanguageId = 1, CreatedBy = 1, CreatedDate = DateTime.UtcNow }
);
          
            base.OnModelCreating(modelBuilder);
        }

    }
}
