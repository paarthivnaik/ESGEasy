// <auto-generated />
using System;
using ESG.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ESG.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240820110303_Initial migration")]
    partial class Initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ESG.Domain.Entities.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrencyCode = "USD",
                            LongText = "United States Dollar",
                            Name = "US Dollar",
                            ShortText = "USD"
                        },
                        new
                        {
                            Id = 2L,
                            CurrencyCode = "EUR",
                            LongText = "Euro",
                            Name = "Euro",
                            ShortText = "EUR"
                        },
                        new
                        {
                            Id = 3L,
                            CurrencyCode = "INR",
                            LongText = "Indian Rupee",
                            Name = "Indian Rupee",
                            ShortText = "INR"
                        },
                        new
                        {
                            Id = 4L,
                            CurrencyCode = "GBP",
                            LongText = "British Pound Sterling",
                            Name = "British Pound",
                            ShortText = "GBP"
                        },
                        new
                        {
                            Id = 5L,
                            CurrencyCode = "CAD",
                            LongText = "Canadian Dollar",
                            Name = "Canadian Dollar",
                            ShortText = "CAD"
                        },
                        new
                        {
                            Id = 6L,
                            CurrencyCode = "AUD",
                            LongText = "Australian Dollar",
                            Name = "Australian Dollar",
                            ShortText = "AUD"
                        },
                        new
                        {
                            Id = 7L,
                            CurrencyCode = "JPY",
                            LongText = "Japanese Yen",
                            Name = "Japanese Yen",
                            ShortText = "JPY"
                        },
                        new
                        {
                            Id = 8L,
                            CurrencyCode = "CHF",
                            LongText = "Swiss Franc",
                            Name = "Swiss Franc",
                            ShortText = "CHF"
                        },
                        new
                        {
                            Id = 9L,
                            CurrencyCode = "CNY",
                            LongText = "Chinese Yuan Renminbi",
                            Name = "Chinese Yuan",
                            ShortText = "CNY"
                        },
                        new
                        {
                            Id = 10L,
                            CurrencyCode = "RUB",
                            LongText = "Russian Ruble",
                            Name = "Russian Ruble",
                            ShortText = "RUB"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DataPointTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId1")
                        .HasColumnType("bigint");

                    b.Property<long>("DatapointTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsNarrative")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long?>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnitOfMeasureTypeId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("DatapointTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UnitOfMeasureTypeId");

                    b.HasIndex("UnitOfMeasureTypeId1")
                        .IsUnique();

                    b.ToTable("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataPointTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("DatapointId")
                        .HasColumnType("bigint");

                    b.Property<long>("DimentionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortingType")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPointTypesId");

                    b.HasIndex("DimentionsId");

                    b.ToTable("DatapointModel");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointTypeTranslations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("DatapointTypeId", "LanguageId")
                        .IsUnique();

                    b.ToTable("DatapointTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointValueTranslations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("DatapointValueId", "LanguageId")
                        .IsUnique();

                    b.ToTable("DatapointValueTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionTranslations", b =>
                {
                    b.Property<long>("DimensionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("DimensionsId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DimensionTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<bool>("isHierarchical")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DimensionTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionTypeTranslations", b =>
                {
                    b.Property<long>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("DimensionTypeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DimensionTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<bool>("isHierarchical")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DimensionTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsoCode = "ru",
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 2L,
                            IsoCode = "uk",
                            Name = "Ukrainian"
                        },
                        new
                        {
                            Id = 3L,
                            IsoCode = "be",
                            Name = "Belarusian"
                        },
                        new
                        {
                            Id = 4L,
                            IsoCode = "et",
                            Name = "Estonian"
                        },
                        new
                        {
                            Id = 5L,
                            IsoCode = "lv",
                            Name = "Latvian"
                        },
                        new
                        {
                            Id = 6L,
                            IsoCode = "lt",
                            Name = "Lithuanian"
                        },
                        new
                        {
                            Id = 7L,
                            IsoCode = "ka",
                            Name = "Georgian"
                        },
                        new
                        {
                            Id = 8L,
                            IsoCode = "hy",
                            Name = "Armenian"
                        },
                        new
                        {
                            Id = 9L,
                            IsoCode = "az",
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            Id = 10L,
                            IsoCode = "kk",
                            Name = "Kazakh"
                        },
                        new
                        {
                            Id = 11L,
                            IsoCode = "uz",
                            Name = "Uzbek"
                        },
                        new
                        {
                            Id = 12L,
                            IsoCode = "tk",
                            Name = "Turkmen"
                        },
                        new
                        {
                            Id = 13L,
                            IsoCode = "tg",
                            Name = "Tajik"
                        },
                        new
                        {
                            Id = 14L,
                            IsoCode = "ky",
                            Name = "Kyrgyz"
                        },
                        new
                        {
                            Id = 15L,
                            IsoCode = "mo",
                            Name = "Moldovan"
                        },
                        new
                        {
                            Id = 16L,
                            IsoCode = "tt",
                            Name = "Tatar"
                        },
                        new
                        {
                            Id = 17L,
                            IsoCode = "ba",
                            Name = "Bashkir"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatsName")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = "USA",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@org1.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LatsName = "Doe",
                            Name = "ESG Global",
                            PostalCode = "12345",
                            RegistrationId = "REG-001",
                            State = 1,
                            StreetAddress = "123 Main St",
                            StreetNumber = "456",
                            TenantId = 1L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7616),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7618),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7619),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "AdminEE"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "ClientAdmin"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "ESG Global"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UnitOfMeasureTypeId");

                    b.ToTable("UnitOfMeasures");

                    b.HasData(
                        new
                        {
                            Id = 4L,
                            Code = "weight",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7744),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7745),
                            LongText = "Kilogram",
                            Name = "weight",
                            OrganizationId = 1L,
                            ShortText = "kg",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            Code = "weight",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7747),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7748),
                            LongText = "Gram",
                            Name = "weight",
                            OrganizationId = 1L,
                            ShortText = "gm",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            Code = "weight",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7749),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7750),
                            LongText = "milliliter",
                            Name = "amount",
                            OrganizationId = 1L,
                            ShortText = "ml",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            Code = "weight",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7752),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7752),
                            LongText = "meterpersecond",
                            Name = "speed",
                            OrganizationId = 1L,
                            ShortText = "m/s",
                            State = 1,
                            UnitOfMeasureTypeId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            Code = "weight",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7754),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7755),
                            LongText = "kmperhour",
                            Name = "speed",
                            OrganizationId = 1L,
                            ShortText = "kmph",
                            State = 1,
                            UnitOfMeasureTypeId = 1L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTranslations", b =>
                {
                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UnitOfMeasureTranslations");

                    b.HasData(
                        new
                        {
                            UnitOfMeasureId = 4L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7775),
                            Id = 10L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7775),
                            LongText = "Kilogram",
                            Name = "weight",
                            ShortText = "kg",
                            State = 0
                        },
                        new
                        {
                            UnitOfMeasureId = 4L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7778),
                            Id = 11L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7778),
                            LongText = "Gram",
                            Name = "weight",
                            ShortText = "gm",
                            State = 0
                        },
                        new
                        {
                            UnitOfMeasureId = 6L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7780),
                            Id = 12L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7781),
                            LongText = "milliliter",
                            Name = "amount",
                            ShortText = "ml",
                            State = 0
                        },
                        new
                        {
                            UnitOfMeasureId = 7L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7782),
                            Id = 13L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7783),
                            LongText = "meterpersecond",
                            Name = "speed",
                            ShortText = "m/s",
                            State = 0
                        },
                        new
                        {
                            UnitOfMeasureId = 7L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7785),
                            Id = 14L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7785),
                            LongText = "kmperhour",
                            Name = "speed",
                            ShortText = "kmph",
                            State = 0
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UnitOfMeasureTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "speed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7662),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7664),
                            LongText = "Type 1",
                            Name = "Speed",
                            OrganizationId = 1L,
                            ShortText = "T1",
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            Code = "weight",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7670),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7671),
                            LongText = "Type 2",
                            Name = "Weight",
                            OrganizationId = 1L,
                            ShortText = "T2",
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            Code = "amount",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7724),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7724),
                            LongText = "Type 3",
                            Name = "Amount",
                            OrganizationId = 1L,
                            ShortText = "T3",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTypeTranslations", b =>
                {
                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureTypeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UnitOfMeasureTypeTranslations");

                    b.HasData(
                        new
                        {
                            UnitOfMeasureTypeId = 2L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7804),
                            Id = 10L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7805),
                            LongText = "Kilogram",
                            Name = "weight",
                            ShortText = "kg",
                            State = 0
                        },
                        new
                        {
                            UnitOfMeasureTypeId = 2L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7807),
                            Id = 11L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7807),
                            LongText = "Gram",
                            Name = "weight",
                            ShortText = "gm",
                            State = 0
                        },
                        new
                        {
                            UnitOfMeasureTypeId = 3L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7809),
                            Id = 12L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7809),
                            LongText = "milliliter",
                            Name = "amount",
                            ShortText = "ml",
                            State = 0
                        },
                        new
                        {
                            UnitOfMeasureTypeId = 1L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7811),
                            Id = 13L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7812),
                            LongText = "meterpersecond",
                            Name = "speed",
                            ShortText = "m/s",
                            State = 0
                        },
                        new
                        {
                            UnitOfMeasureTypeId = 1L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7813),
                            Id = 14L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7814),
                            LongText = "kmperhour",
                            Name = "speed",
                            ShortText = "kmph",
                            State = 0
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizationUserId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecurityStamp")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7574),
                            Email = "user1@example.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LastName = "Doe",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 49 },
                            PhoneNumber = "1234567890",
                            SecurityStamp = new Guid("e6691f62-54d6-4b62-a465-7dd858878a2a"),
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7578),
                            Email = "user2@example.com",
                            FirstName = "Jane",
                            LanguageId = 1L,
                            LastName = "Smith",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 50 },
                            PhoneNumber = "0987654321",
                            SecurityStamp = new Guid("a9b5fd74-5cd3-4e5c-b138-ecacdad28fb4"),
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7581),
                            Email = "user3@example.com",
                            FirstName = "Alice",
                            LanguageId = 1L,
                            LastName = "Johnson",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 51 },
                            PhoneNumber = "2345678901",
                            SecurityStamp = new Guid("6a358f4e-e162-490d-9481-778150ffb519"),
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7638),
                            RoleId = 1L,
                            State = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7639),
                            RoleId = 2L,
                            State = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 3, 3, 221, DateTimeKind.Utc).AddTicks(7640),
                            RoleId = 3L,
                            State = 1,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DataPointTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("DataPointTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ESG.Domain.Entities.Currency", null)
                        .WithMany("DataPointValues")
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointType")
                        .WithMany("DataPointValues")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DataPointValues")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("DataPointValues")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureType")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureTypeId");

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", null)
                        .WithOne("DataPointValues")
                        .HasForeignKey("ESG.Domain.Entities.DataPointValues", "UnitOfMeasureTypeId1");

                    b.Navigation("Currency");

                    b.Navigation("DataPointType");

                    b.Navigation("Language");

                    b.Navigation("Organization");

                    b.Navigation("UnitOfMeasureType");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointModel", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointTypes")
                        .WithMany()
                        .HasForeignKey("DataPointTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Dimensions", "Dimentions")
                        .WithMany()
                        .HasForeignKey("DimentionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointTypes");

                    b.Navigation("Dimentions");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointTypeTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointTypes")
                        .WithMany("DataPointTypeTranslations")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.DataPointValues", null)
                        .WithMany("DatapointTypeTranslations")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DatapointTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointTypes");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointValueTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DataPointValues", "DataPointValues")
                        .WithMany()
                        .HasForeignKey("DatapointValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DatapointValueTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointValues");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Dimensions", "Dimensions")
                        .WithMany("DimensionTranslations")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DimensionTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimensions");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DimensionTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("DimensionType")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionTypeTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DimensionType", "DimensionType")
                        .WithMany("DimensionTypeTranslations")
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DimensionTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DimensionType", "DimensionType")
                        .WithMany("Dimensions")
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("Dimensions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("Dimensions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Organization", null)
                        .WithMany("Languages")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Organizations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Organization", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureTypes")
                        .WithMany("UnitOfMeasure")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");

                    b.Navigation("UnitOfMeasureTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("UnitOfMeasureTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("UnitOfMeasureTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTypeTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("UnitOfMeasureTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureType")
                        .WithMany("UnitOfMeasureTypeTranslations")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasureType");
                });

            modelBuilder.Entity("ESG.Domain.Entities.User", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.OrganizationUser", null)
                        .WithMany("Users")
                        .HasForeignKey("OrganizationUserId");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Currency", b =>
                {
                    b.Navigation("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.Navigation("DataPointTypeTranslations");

                    b.Navigation("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.Navigation("DatapointTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.Navigation("DimensionTypeTranslations");

                    b.Navigation("Dimensions");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.Navigation("DimensionTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.Navigation("DataPointTypes");

                    b.Navigation("DataPointValues");

                    b.Navigation("DatapointTypeTranslations");

                    b.Navigation("DatapointValueTranslations");

                    b.Navigation("DimensionTranslations");

                    b.Navigation("DimensionTypeTranslations");

                    b.Navigation("DimensionTypes");

                    b.Navigation("Dimensions");

                    b.Navigation("UnitOfMeasureTranslations");

                    b.Navigation("UnitOfMeasureTypeTranslations");

                    b.Navigation("UnitOfMeasureTypes");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.Navigation("DataPointTypes");

                    b.Navigation("DataPointValues");

                    b.Navigation("DimensionType");

                    b.Navigation("Dimensions");

                    b.Navigation("Languages");

                    b.Navigation("UnitOfMeasureTypes");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("UnitOfMeasureTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.Navigation("DataPointValues");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("UnitOfMeasureTypeTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
