// <auto-generated />
using System;
using ESG.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ESG.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240807184252_Initial Create")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ESG.Domain.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrencyCode = "USD",
                            LongText = "United States Dollar",
                            Name = "US Dollar",
                            ShortText = "USD"
                        },
                        new
                        {
                            Id = 2L,
                            CurrencyCode = "EUR",
                            LongText = "Euro",
                            Name = "Euro",
                            ShortText = "EUR"
                        },
                        new
                        {
                            Id = 3L,
                            CurrencyCode = "INR",
                            LongText = "Indian Rupee",
                            Name = "Indian Rupee",
                            ShortText = "INR"
                        },
                        new
                        {
                            Id = 4L,
                            CurrencyCode = "GBP",
                            LongText = "British Pound Sterling",
                            Name = "British Pound",
                            ShortText = "GBP"
                        },
                        new
                        {
                            Id = 5L,
                            CurrencyCode = "CAD",
                            LongText = "Canadian Dollar",
                            Name = "Canadian Dollar",
                            ShortText = "CAD"
                        },
                        new
                        {
                            Id = 6L,
                            CurrencyCode = "AUD",
                            LongText = "Australian Dollar",
                            Name = "Australian Dollar",
                            ShortText = "AUD"
                        },
                        new
                        {
                            Id = 7L,
                            CurrencyCode = "JPY",
                            LongText = "Japanese Yen",
                            Name = "Japanese Yen",
                            ShortText = "JPY"
                        },
                        new
                        {
                            Id = 8L,
                            CurrencyCode = "CHF",
                            LongText = "Swiss Franc",
                            Name = "Swiss Franc",
                            ShortText = "CHF"
                        },
                        new
                        {
                            Id = 9L,
                            CurrencyCode = "CNY",
                            LongText = "Chinese Yuan Renminbi",
                            Name = "Chinese Yuan",
                            ShortText = "CNY"
                        },
                        new
                        {
                            Id = 10L,
                            CurrencyCode = "RUB",
                            LongText = "Russian Ruble",
                            Name = "Russian Ruble",
                            ShortText = "RUB"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DimentionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DimentionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DataPointTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4437),
                            DimentionId = 1L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 1",
                            Name = "DatapointType1",
                            OrganizationId = 1L,
                            ShortText = "T1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4441),
                            DimentionId = 1L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 2",
                            Name = "DatapointType2",
                            OrganizationId = 1L,
                            ShortText = "T2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4444),
                            DimentionId = 1L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 3",
                            Name = "DatapointType3",
                            OrganizationId = 1L,
                            ShortText = "T3"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4447),
                            DimentionId = 2L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 5",
                            Name = "DatapointType5",
                            OrganizationId = 1L,
                            ShortText = "T5"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4475),
                            DimentionId = 2L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 6",
                            Name = "DatapointType6",
                            OrganizationId = 1L,
                            ShortText = "T6"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4479),
                            DimentionId = 2L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 7",
                            Name = "DatapointType7",
                            OrganizationId = 1L,
                            ShortText = "T7"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4482),
                            DimentionId = 3L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 8",
                            Name = "DatapointType8",
                            OrganizationId = 1L,
                            ShortText = "T8"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4484),
                            DimentionId = 3L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 9",
                            Name = "DatapointType9",
                            OrganizationId = 1L,
                            ShortText = "T9"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4487),
                            DimentionId = 3L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            LongText = "Type 10",
                            Name = "DatapointType10",
                            OrganizationId = 1L,
                            ShortText = "T10"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCurrency")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNarrative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUOM")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DatapointTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DataPointValues");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4535),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsDeleted = false,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 1L,
                            Name = "DataPointValue1",
                            OrganizationId = 1L,
                            Purpose = "Purpose 1",
                            Value = "Value 1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4540),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsDeleted = false,
                            IsNarrative = false,
                            IsUOM = true,
                            LanguageId = 1L,
                            Name = "DataPointValue2",
                            OrganizationId = 1L,
                            Purpose = "Purpose 2",
                            Value = "Value 2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4544),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsDeleted = false,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 1L,
                            Name = "DataPointValue3",
                            OrganizationId = 1L,
                            Purpose = "Purpose 3",
                            Value = "Value 3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4547),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsDeleted = false,
                            IsNarrative = true,
                            IsUOM = false,
                            LanguageId = 1L,
                            Name = "DataPointValue4",
                            OrganizationId = 1L,
                            Purpose = "Purpose 4",
                            Value = "Value 4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4550),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsDeleted = false,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 1L,
                            Name = "DataPointValue5",
                            OrganizationId = 1L,
                            Purpose = "Purpose 5",
                            Value = "Value 5"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4553),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsDeleted = false,
                            IsNarrative = false,
                            IsUOM = true,
                            LanguageId = 1L,
                            Name = "DataPointValue6",
                            OrganizationId = 1L,
                            Purpose = "Purpose 6",
                            Value = "Value 6"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4556),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsDeleted = false,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 2L,
                            Name = "DataPointValue7",
                            OrganizationId = 1L,
                            Purpose = "Purpose 7",
                            Value = "Value 7"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4559),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsDeleted = false,
                            IsNarrative = true,
                            IsUOM = false,
                            LanguageId = 2L,
                            Name = "DataPointValue8",
                            OrganizationId = 1L,
                            Purpose = "Purpose 8",
                            Value = "Value 8"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4562),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsDeleted = false,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 2L,
                            Name = "DataPointValue9",
                            OrganizationId = 1L,
                            Purpose = "Purpose 9",
                            Value = "Value 9"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4565),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsDeleted = false,
                            IsNarrative = false,
                            IsUOM = true,
                            LanguageId = 2L,
                            Name = "DataPointValue10",
                            OrganizationId = 1L,
                            Purpose = "Purpose 10",
                            Value = "Value 10"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimentionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHeirarchialDimention")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DimentionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4667),
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 1",
                            Name = "DimensionType1",
                            OrganizationId = 1L,
                            ShortText = "DT1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4670),
                            IsDeleted = false,
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension Type 2",
                            Name = "DimensionType2",
                            OrganizationId = 1L,
                            ShortText = "DT2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4673),
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 3",
                            Name = "DimensionType3",
                            OrganizationId = 1L,
                            ShortText = "DT3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4675),
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 4",
                            Name = "DimensionType4",
                            OrganizationId = 1L,
                            ShortText = "DT4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4678),
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 5",
                            Name = "DimensionType5",
                            OrganizationId = 1L,
                            ShortText = "DT5"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4680),
                            IsDeleted = false,
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension Type 6",
                            Name = "DimensionType6",
                            OrganizationId = 1L,
                            ShortText = "DT6"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4683),
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 7",
                            Name = "DimensionType7",
                            OrganizationId = 1L,
                            ShortText = "DT7"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4685),
                            IsDeleted = false,
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension Type 8",
                            Name = "DimensionType8",
                            OrganizationId = 1L,
                            ShortText = "DT8"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4688),
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 9",
                            Name = "DimensionType9",
                            OrganizationId = 1L,
                            ShortText = "DT9"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4690),
                            IsDeleted = false,
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension Type 10",
                            Name = "DimensionType10",
                            OrganizationId = 1L,
                            ShortText = "DT10"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimentions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DimentionTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHeirarchialDimention")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DimentionTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Dimentions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4606),
                            DimentionTypeId = 1L,
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension 1",
                            Name = "Dimension1",
                            OrganizationId = 1L,
                            ShortText = "D1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4609),
                            DimentionTypeId = 1L,
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension 2",
                            Name = "Dimension2",
                            OrganizationId = 1L,
                            ShortText = "D2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4612),
                            DimentionTypeId = 2L,
                            IsDeleted = false,
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension 3",
                            Name = "Dimension3",
                            OrganizationId = 1L,
                            ShortText = "D3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4614),
                            DimentionTypeId = 2L,
                            IsDeleted = false,
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension 4",
                            Name = "Dimension4",
                            OrganizationId = 1L,
                            ShortText = "D4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4617),
                            DimentionTypeId = 2L,
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension 5",
                            Name = "Dimension5",
                            OrganizationId = 1L,
                            ShortText = "D5"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4620),
                            DimentionTypeId = 3L,
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension 6",
                            Name = "Dimension6",
                            OrganizationId = 1L,
                            ShortText = "D6"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4622),
                            DimentionTypeId = 3L,
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension 7",
                            Name = "Dimension7",
                            OrganizationId = 1L,
                            ShortText = "D7"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4625),
                            DimentionTypeId = 4L,
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension 8",
                            Name = "Dimension8",
                            OrganizationId = 1L,
                            ShortText = "D8"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4628),
                            DimentionTypeId = 4L,
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension 9",
                            Name = "Dimension9",
                            OrganizationId = 1L,
                            ShortText = "D9"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4630),
                            DimentionTypeId = 4L,
                            IsDeleted = false,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension 10",
                            Name = "Dimension10",
                            OrganizationId = 1L,
                            ShortText = "D10"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsoCode = "ru",
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 2L,
                            IsoCode = "uk",
                            Name = "Ukrainian"
                        },
                        new
                        {
                            Id = 3L,
                            IsoCode = "be",
                            Name = "Belarusian"
                        },
                        new
                        {
                            Id = 4L,
                            IsoCode = "et",
                            Name = "Estonian"
                        },
                        new
                        {
                            Id = 5L,
                            IsoCode = "lv",
                            Name = "Latvian"
                        },
                        new
                        {
                            Id = 6L,
                            IsoCode = "lt",
                            Name = "Lithuanian"
                        },
                        new
                        {
                            Id = 7L,
                            IsoCode = "ka",
                            Name = "Georgian"
                        },
                        new
                        {
                            Id = 8L,
                            IsoCode = "hy",
                            Name = "Armenian"
                        },
                        new
                        {
                            Id = 9L,
                            IsoCode = "az",
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            Id = 10L,
                            IsoCode = "kk",
                            Name = "Kazakh"
                        },
                        new
                        {
                            Id = 11L,
                            IsoCode = "uz",
                            Name = "Uzbek"
                        },
                        new
                        {
                            Id = 12L,
                            IsoCode = "tk",
                            Name = "Turkmen"
                        },
                        new
                        {
                            Id = 13L,
                            IsoCode = "tg",
                            Name = "Tajik"
                        },
                        new
                        {
                            Id = 14L,
                            IsoCode = "ky",
                            Name = "Kyrgyz"
                        },
                        new
                        {
                            Id = 15L,
                            IsoCode = "mo",
                            Name = "Moldovan"
                        },
                        new
                        {
                            Id = 16L,
                            IsoCode = "tt",
                            Name = "Tatar"
                        },
                        new
                        {
                            Id = 17L,
                            IsoCode = "ba",
                            Name = "Bashkir"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "ESGOrganization",
                            TenantId = 1L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5050),
                            IsDeleted = false,
                            OrganizationId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5053),
                            IsDeleted = false,
                            OrganizationId = 1L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5054),
                            IsDeleted = false,
                            OrganizationId = 1L,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "AdminEE"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "ClientAdmin"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "ESG"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UnitOfMeasureTypeId");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UnitOfMeasureTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4799),
                            IsDeleted = false,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4800),
                            Name = "Kilogram",
                            OrganizationId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4813),
                            IsDeleted = false,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4813),
                            Name = "Gram",
                            OrganizationId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4816),
                            IsDeleted = false,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4817),
                            Name = "Liter",
                            OrganizationId = 1L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<long?>("OrganizationUserId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("PasswordExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SecurityStamp")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            Active = true,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5005),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsDeleted = false,
                            LastLogin = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4991),
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 49 },
                            PasswordExpiry = new DateTime(2024, 11, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(4992),
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = new Guid("92c1058e-b417-4331-9914-74771c25905b")
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            Active = true,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5016),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastLogin = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5013),
                            LastName = "Smith",
                            LockoutEnabled = false,
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 50 },
                            PasswordExpiry = new DateTime(2024, 11, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5014),
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = new Guid("a8553d2b-c400-4501-b49c-b7049f4e4c52")
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            Active = true,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5023),
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastLogin = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5021),
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 51 },
                            PasswordExpiry = new DateTime(2024, 11, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5022),
                            PhoneNumber = "2345678901",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = new Guid("2d573e37-1902-4bfd-875f-20bedc609d55")
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5110),
                            IsDeleted = false,
                            RoleId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5113),
                            IsDeleted = false,
                            RoleId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 7, 18, 42, 51, 886, DateTimeKind.Utc).AddTicks(5114),
                            IsDeleted = false,
                            RoleId = 3L,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Dimentions", "Dimentions")
                        .WithMany("DataPointTypes")
                        .HasForeignKey("DimentionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimentions");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointType")
                        .WithMany("DataPointValues")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointType");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimentionType", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimentions", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DimentionType", "DimentionType")
                        .WithMany("Dimentions")
                        .HasForeignKey("DimentionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimentionType");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Organizations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Organization", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureTypes")
                        .WithMany("UnitOfMeasure")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");

                    b.Navigation("UnitOfMeasureTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.User", b =>
                {
                    b.HasOne("ESG.Domain.Entities.OrganizationUser", null)
                        .WithMany("Users")
                        .HasForeignKey("OrganizationUserId");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.Navigation("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimentionType", b =>
                {
                    b.Navigation("Dimentions");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimentions", b =>
                {
                    b.Navigation("DataPointTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.Navigation("UnitOfMeasure");
                });
#pragma warning restore 612, 618
        }
    }
}
