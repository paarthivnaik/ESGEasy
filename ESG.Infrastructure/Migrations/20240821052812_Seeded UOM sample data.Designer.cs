// <auto-generated />
using System;
using ESG.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ESG.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240821052812_Seeded UOM sample data")]
    partial class SeededUOMsampledata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ESG.Domain.Entities.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrencyCode = "USD",
                            LongText = "United States Dollar",
                            Name = "US Dollar",
                            ShortText = "USD"
                        },
                        new
                        {
                            Id = 2L,
                            CurrencyCode = "EUR",
                            LongText = "Euro",
                            Name = "Euro",
                            ShortText = "EUR"
                        },
                        new
                        {
                            Id = 3L,
                            CurrencyCode = "INR",
                            LongText = "Indian Rupee",
                            Name = "Indian Rupee",
                            ShortText = "INR"
                        },
                        new
                        {
                            Id = 4L,
                            CurrencyCode = "GBP",
                            LongText = "British Pound Sterling",
                            Name = "British Pound",
                            ShortText = "GBP"
                        },
                        new
                        {
                            Id = 5L,
                            CurrencyCode = "CAD",
                            LongText = "Canadian Dollar",
                            Name = "Canadian Dollar",
                            ShortText = "CAD"
                        },
                        new
                        {
                            Id = 6L,
                            CurrencyCode = "AUD",
                            LongText = "Australian Dollar",
                            Name = "Australian Dollar",
                            ShortText = "AUD"
                        },
                        new
                        {
                            Id = 7L,
                            CurrencyCode = "JPY",
                            LongText = "Japanese Yen",
                            Name = "Japanese Yen",
                            ShortText = "JPY"
                        },
                        new
                        {
                            Id = 8L,
                            CurrencyCode = "CHF",
                            LongText = "Swiss Franc",
                            Name = "Swiss Franc",
                            ShortText = "CHF"
                        },
                        new
                        {
                            Id = 9L,
                            CurrencyCode = "CNY",
                            LongText = "Chinese Yuan Renminbi",
                            Name = "Chinese Yuan",
                            ShortText = "CNY"
                        },
                        new
                        {
                            Id = 10L,
                            CurrencyCode = "RUB",
                            LongText = "Russian Ruble",
                            Name = "Russian Ruble",
                            ShortText = "RUB"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DataPointTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId1")
                        .HasColumnType("bigint");

                    b.Property<long>("DatapointTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsNarrative")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long?>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnitOfMeasureTypeId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("DatapointTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UnitOfMeasureTypeId");

                    b.HasIndex("UnitOfMeasureTypeId1")
                        .IsUnique();

                    b.ToTable("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataPointTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("DatapointId")
                        .HasColumnType("bigint");

                    b.Property<long>("DimentionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortingType")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPointTypesId");

                    b.HasIndex("DimentionsId");

                    b.ToTable("DatapointModel");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointTypeTranslations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("DatapointTypeId", "LanguageId")
                        .IsUnique();

                    b.ToTable("DatapointTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointValueTranslations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("DatapointValueId", "LanguageId")
                        .IsUnique();

                    b.ToTable("DatapointValueTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionTranslations", b =>
                {
                    b.Property<long>("DimensionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("DimensionsId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DimensionTranslations");

                    b.HasData(
                        new
                        {
                            DimensionsId = 100L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 1L,
                            LongText = "General",
                            Name = "general",
                            ShortText = "General",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 101L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 2L,
                            LongText = "Environment",
                            Name = "environment",
                            ShortText = "Environment",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 102L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 3L,
                            LongText = "Social",
                            Name = "social",
                            ShortText = "Social",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 103L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 4L,
                            LongText = "Governance",
                            Name = "governance",
                            ShortText = "Governance",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 100L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 5L,
                            LongText = "Généralités",
                            Name = "general",
                            ShortText = "Généralités",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 101L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 6L,
                            LongText = "Environnement",
                            Name = "environment",
                            ShortText = "Environnement",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 102L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 7L,
                            LongText = "Social",
                            Name = "social",
                            ShortText = "Social",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 103L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 8L,
                            LongText = "Gouvernance",
                            Name = "governance",
                            ShortText = "Gouvernance",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 104L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 9L,
                            LongText = "General principles",
                            Name = "ESRS2_GP",
                            ShortText = "General principles",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 105L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 10L,
                            LongText = "General disclosures",
                            Name = "ESRS2_MDR",
                            ShortText = "General disclosures",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 106L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 11L,
                            LongText = "Climate change",
                            Name = "E1",
                            ShortText = "Climate change",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 107L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 12L,
                            LongText = "Pollution",
                            Name = "E2",
                            ShortText = "Pollution",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 108L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 13L,
                            LongText = "Water & marine resources",
                            Name = "E3",
                            ShortText = "Water & marine resources",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 109L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 14L,
                            LongText = "Biodiversity and eco systems",
                            Name = "E4",
                            ShortText = "Biodiversity and eco systems",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 110L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 15L,
                            LongText = "Resource use and circular economy",
                            Name = "E5",
                            ShortText = "Resource use and circular economy",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 111L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 16L,
                            LongText = "Own workforce",
                            Name = "S1",
                            ShortText = "Own workforce",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 112L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 17L,
                            LongText = "Workers in value chain",
                            Name = "S2",
                            ShortText = "Workers in value chain",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 113L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 18L,
                            LongText = "Affected communities",
                            Name = "S3",
                            ShortText = "Affected communities",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 114L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 19L,
                            LongText = "Consumers and end-users",
                            Name = "S4",
                            ShortText = "Consumers and end-users",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 115L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 20L,
                            LongText = "Business Conduct",
                            Name = "G1",
                            ShortText = "Business Conduct",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 104L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 21L,
                            LongText = "Principes généraux",
                            Name = "ESRS2_GP",
                            ShortText = "Principes généraux",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 105L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 22L,
                            LongText = "Informations générales",
                            Name = "ESRS2_MDR",
                            ShortText = "Informations générales",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 106L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 23L,
                            LongText = "Changement climatique",
                            Name = "E1",
                            ShortText = "Changement climatique",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 107L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 24L,
                            LongText = "Pollution",
                            Name = "E2",
                            ShortText = "Pollution",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 108L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 25L,
                            LongText = "Ressources en eau et marines",
                            Name = "E3",
                            ShortText = "Ressources en eau et marines",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 109L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 26L,
                            LongText = "Biodiversité et écosystèmes",
                            Name = "E4",
                            ShortText = "Biodiversité et écosystèmes",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 110L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 27L,
                            LongText = "Utilisation des ressources et économie circulaire",
                            Name = "E5",
                            ShortText = "Utilisation des ressources et économie circulaire",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 111L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 28L,
                            LongText = "Main-d'œuvre propre",
                            Name = "S1",
                            ShortText = "Main-d'œuvre propre",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 112L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 29L,
                            LongText = "Travailleurs dans la chaîne de valeur",
                            Name = "S2",
                            ShortText = "Travailleurs dans la chaîne de valeur",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 113L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 30L,
                            LongText = "Communautés affectées",
                            Name = "S3",
                            ShortText = "Communautés affectées",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 114L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 31L,
                            LongText = "Consommateurs et utilisateurs finaux",
                            Name = "S4",
                            ShortText = "Consommateurs et utilisateurs finaux",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 115L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 32L,
                            LongText = "Conduite des affaires",
                            Name = "G1",
                            ShortText = "Conduite des affaires",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 116L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 33L,
                            LongText = "Base générale pour la préparation des déclarations de durabilité",
                            Name = "BP-1",
                            ShortText = "Base générale pour la préparation des déclarations de durabilité",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 117L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 34L,
                            LongText = "Divulgations concernant des circonstances spécifiques",
                            Name = "BP-2",
                            ShortText = "Divulgations concernant des circonstances spécifiques",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 118L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 35L,
                            LongText = "Le rôle des organes administratifs, de gestion et de surveillance",
                            Name = "GOV-1",
                            ShortText = "Le rôle des organes administratifs, de gestion et de surveillance",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 119L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 36L,
                            LongText = "Informations fournies et questions de durabilité traitées par les organes administratifs, de gestion et de surveillance de l’entreprise",
                            Name = "GOV-2",
                            ShortText = "Informations fournies et questions de durabilité traitées par les organes administratifs, de gestion et de surveillance de l’entreprise",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 120L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 37L,
                            LongText = "Intégration de la performance liée à la durabilité dans les systèmes de rémunération",
                            Name = "GOV-3",
                            ShortText = "Intégration de la performance liée à la durabilité dans les systèmes de rémunération",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 121L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 38L,
                            LongText = "Déclaration sur la diligence raisonnable",
                            Name = "GOV-4",
                            ShortText = "Déclaration sur la diligence raisonnable",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 122L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 39L,
                            LongText = "Gestion des risques et contrôles internes sur la déclaration de durabilité",
                            Name = "GOV-5",
                            ShortText = "Gestion des risques et contrôles internes sur la déclaration de durabilité",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 123L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 40L,
                            LongText = "Stratégie, modèle économique et chaîne de valeur",
                            Name = "SBM-1",
                            ShortText = "Stratégie, modèle économique et chaîne de valeur",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 124L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 41L,
                            LongText = "Intérêts et points de vue des parties prenantes",
                            Name = "SBM-2",
                            ShortText = "Intérêts et points de vue des parties prenantes",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 125L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 42L,
                            LongText = "Impacts matériels, risques et opportunités et leur interaction avec la stratégie et le modèle économique",
                            Name = "SBM-3",
                            ShortText = "Impacts matériels, risques et opportunités et leur interaction avec la stratégie et le modèle économique",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 126L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 43L,
                            LongText = "Description du processus pour identifier et évaluer les impacts matériels, risques et opportunités",
                            Name = "IRO-1",
                            ShortText = "Description du processus pour identifier et évaluer les impacts matériels, risques et opportunités",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 127L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 44L,
                            LongText = "Exigences de divulgation dans les ESRS couvertes par la déclaration de durabilité de l’entreprise",
                            Name = "IRO-2",
                            ShortText = "Exigences de divulgation dans les ESRS couvertes par la déclaration de durabilité de l’entreprise",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 128L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 45L,
                            LongText = "Impacts matériels, risques et opportunités et leur interaction avec la stratégie et le modèle économique",
                            Name = "IRO-3",
                            ShortText = "Impacts matériels, risques et opportunités et leur interaction avec la stratégie et le modèle économique",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<bool>("isHierarchical")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DimensionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "esg_topic",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(922),
                            LanguageId = 1L,
                            LongText = "Dimension Type 1",
                            Name = "ESG Topic",
                            OrganizationId = 1L,
                            ShortText = "DimensionType topic",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 2L,
                            Code = "esg-standard",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(924),
                            LanguageId = 1L,
                            LongText = "Dimension Type 2",
                            Name = "ESG Standard",
                            OrganizationId = 1L,
                            ShortText = "dimensiontype standard",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 3L,
                            Code = "esg-dq",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(926),
                            LanguageId = 1L,
                            LongText = "Dimension Type 3",
                            Name = "ESG Disclosure Requirements",
                            OrganizationId = 1L,
                            ShortText = "dimensiontype disclosure requirement",
                            State = 1,
                            isHierarchical = true
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionTypeTranslations", b =>
                {
                    b.Property<long>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("DimensionTypeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DimensionTypeTranslations");

                    b.HasData(
                        new
                        {
                            DimensionTypeId = 1L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(970),
                            Id = 1L,
                            LongText = "Dimension Type 1",
                            Name = "ESG Topic",
                            ShortText = "DimensionType topic",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 1L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(972),
                            Id = 2L,
                            LongText = "Type de dimension 1",
                            Name = "Sujet ESG",
                            ShortText = "Sujet de type de dimension",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(973),
                            Id = 3L,
                            LongText = "Dimension Type 2",
                            Name = "ESG Standard",
                            ShortText = "DimensionType standard",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 2L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(974),
                            Id = 4L,
                            LongText = "Type de dimension 2",
                            Name = "Norme ESG",
                            ShortText = "Norme de type de dimension",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(976),
                            Id = 5L,
                            LongText = "Dimension Type 3",
                            Name = "ESG Disclosure Requirements",
                            ShortText = "DimensionType disclosure requirement",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 3L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(977),
                            Id = 6L,
                            LongText = "Type de dimension 3",
                            Name = "Exigences de divulgation ESG",
                            ShortText = "Exigences de divulgation de type de dimension",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<bool>("isHierarchical")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DimensionTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Dimensions");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            Code = "general",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 1L,
                            LanguageId = 1L,
                            LongText = "general",
                            Name = "general",
                            OrganizationId = 1L,
                            ShortText = "general",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 101L,
                            Code = "environment",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 1L,
                            LanguageId = 1L,
                            LongText = "environment",
                            Name = "environment",
                            OrganizationId = 1L,
                            ShortText = "environment",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 102L,
                            Code = "social",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 1L,
                            LanguageId = 1L,
                            LongText = "social",
                            Name = "social",
                            OrganizationId = 1L,
                            ShortText = "social",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 103L,
                            Code = "governance",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 1L,
                            LanguageId = 1L,
                            LongText = "governance",
                            Name = "governance",
                            OrganizationId = 1L,
                            ShortText = "governance",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 104L,
                            Code = "ESRS2_GP",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "General principles",
                            Name = "ESRS2_GP",
                            OrganizationId = 1L,
                            ShortText = "General principles",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 105L,
                            Code = "ESRS2_MDR",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "General disclosures",
                            Name = "ESRS2_MDR",
                            OrganizationId = 1L,
                            ShortText = "General disclosures",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 106L,
                            Code = "E1",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Climate change",
                            Name = "E1",
                            OrganizationId = 1L,
                            ShortText = "Climate change",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 107L,
                            Code = "E2",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Pollution",
                            Name = "E2",
                            OrganizationId = 1L,
                            ShortText = "Pollution",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 108L,
                            Code = "E3",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Water & marine resources",
                            Name = "E3",
                            OrganizationId = 1L,
                            ShortText = "Water & marine resources",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 109L,
                            Code = "E4",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Biodiversity and eco systems",
                            Name = "E4",
                            OrganizationId = 1L,
                            ShortText = "Biodiversity and eco systems",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 110L,
                            Code = "E5",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Resourtce use and circular economy",
                            Name = "E5",
                            OrganizationId = 1L,
                            ShortText = "Resourtce use and circular economy",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 111L,
                            Code = "S1",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Own workforce",
                            Name = "s1",
                            OrganizationId = 1L,
                            ShortText = "Own workforce",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 112L,
                            Code = "S2",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Workers in value chain",
                            Name = "s2",
                            OrganizationId = 1L,
                            ShortText = "Workers in value chain",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 113L,
                            Code = "S3",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Affected communities",
                            Name = "s3",
                            OrganizationId = 1L,
                            ShortText = "Affected communities",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 114L,
                            Code = "S4",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Consumers and end-users",
                            Name = "s4",
                            OrganizationId = 1L,
                            ShortText = "Consumers and end-users",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 115L,
                            Code = "G1",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LongText = "Business Conduct",
                            Name = "G1",
                            OrganizationId = 1L,
                            ShortText = "Business Conduct",
                            State = 1,
                            isHierarchical = true
                        },
                        new
                        {
                            Id = 116L,
                            Code = "BP-1",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "General basis for preparation of sustainability statements",
                            Name = "BP-1",
                            OrganizationId = 1L,
                            ShortText = "General basis for preparation of sustainability statements",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 117L,
                            Code = "BP-2",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Disclosures in relation to specific circumstances",
                            Name = "BP-2",
                            OrganizationId = 1L,
                            ShortText = "Disclosures in relation to specific circumstances",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 118L,
                            Code = "GOV-1",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "The role of the administrative, management and supervisory bodies",
                            Name = "GOV-1",
                            OrganizationId = 1L,
                            ShortText = "The role of the administrative, management and supervisory bodies",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 119L,
                            Code = "GOV-2",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Information provided to and sustainability matters addressed by the undertaking’s administrative, management and supervisory bodies",
                            Name = "GOV-2",
                            OrganizationId = 1L,
                            ShortText = "Information provided to and sustainability matters addressed by the undertaking’s administrative, management and supervisory bodies",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 120L,
                            Code = "GOV-3",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Integration of sustainability-related performance in incentive schemes",
                            Name = "GOV-3",
                            OrganizationId = 1L,
                            ShortText = "Integration of sustainability-related performance in incentive schemes",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 121L,
                            Code = "GOV-4",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Statement on due diligence",
                            Name = "GOV-4",
                            OrganizationId = 1L,
                            ShortText = "Statement on due diligence",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 122L,
                            Code = "GOV-5",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Risk management and internal controls over sustainability reporting",
                            Name = "GOV-5",
                            OrganizationId = 1L,
                            ShortText = "Risk management and internal controls over sustainability reporting",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 123L,
                            Code = "SBM-1",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Strategy, business model and value chain",
                            Name = "SBM-1",
                            OrganizationId = 1L,
                            ShortText = "Strategy, business model and value chain",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 124L,
                            Code = "SBM-2",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Interests and views of stakeholders",
                            Name = "SBM-2",
                            OrganizationId = 1L,
                            ShortText = "Interests and views of stakeholders",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 125L,
                            Code = "SBM-3",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Material impacts, risks and opportunities and their interaction with strategy and business model",
                            Name = "SBM-3",
                            OrganizationId = 1L,
                            ShortText = "Material impacts, risks and opportunities and their interaction with strategy and business model",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 126L,
                            Code = "IRO-1",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Description of the process to identify and assess material impacts, risks and opportunities",
                            Name = "IRO-1",
                            OrganizationId = 1L,
                            ShortText = "Description of the process to identify and assess material impacts, risks and opportunities",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 127L,
                            Code = "IRO-2",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Disclosure requirements in ESRS covered by the undertaking’s sustainability statement",
                            Name = "IRO-2",
                            OrganizationId = 1L,
                            ShortText = "Disclosure requirements in ESRS covered by the undertaking’s sustainability statement",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 128L,
                            Code = "IRO-3",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Material impacts, risks and opportunities and their interaction with strategy and business model",
                            Name = "IRO-3",
                            OrganizationId = 1L,
                            ShortText = "Material impacts, risks and opportunities and their interaction with strategy and business model",
                            State = 1,
                            isHierarchical = false
                        },
                        new
                        {
                            Id = 129L,
                            Code = "IRO-4",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionTypeId = 3L,
                            LanguageId = 1L,
                            LongText = "Material impacts, risks and opportunities in the undertaking’s own operations and value chain",
                            Name = "IRO-4",
                            OrganizationId = 1L,
                            ShortText = "Material impacts, risks and opportunities in the undertaking’s own operations and value chain",
                            State = 1,
                            isHierarchical = false
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Hierarchy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataPointTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("DatapointId")
                        .HasColumnType("bigint");

                    b.Property<long>("DimensionId")
                        .HasColumnType("bigint");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<int>("NodeType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPointTypesId");

                    b.HasIndex("DimensionId");

                    b.ToTable("Hierarchy");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsoCode = "en",
                            Name = "English"
                        },
                        new
                        {
                            Id = 2L,
                            IsoCode = "fr",
                            Name = "French"
                        },
                        new
                        {
                            Id = 3L,
                            IsoCode = "be",
                            Name = "Belarusian"
                        },
                        new
                        {
                            Id = 4L,
                            IsoCode = "et",
                            Name = "Estonian"
                        },
                        new
                        {
                            Id = 5L,
                            IsoCode = "lv",
                            Name = "Latvian"
                        },
                        new
                        {
                            Id = 6L,
                            IsoCode = "lt",
                            Name = "Lithuanian"
                        },
                        new
                        {
                            Id = 7L,
                            IsoCode = "ka",
                            Name = "Georgian"
                        },
                        new
                        {
                            Id = 8L,
                            IsoCode = "hy",
                            Name = "Armenian"
                        },
                        new
                        {
                            Id = 9L,
                            IsoCode = "az",
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            Id = 10L,
                            IsoCode = "kk",
                            Name = "Kazakh"
                        },
                        new
                        {
                            Id = 11L,
                            IsoCode = "uz",
                            Name = "Uzbek"
                        },
                        new
                        {
                            Id = 12L,
                            IsoCode = "tk",
                            Name = "Turkmen"
                        },
                        new
                        {
                            Id = 13L,
                            IsoCode = "tg",
                            Name = "Tajik"
                        },
                        new
                        {
                            Id = 14L,
                            IsoCode = "ky",
                            Name = "Kyrgyz"
                        },
                        new
                        {
                            Id = 15L,
                            IsoCode = "mo",
                            Name = "Moldovan"
                        },
                        new
                        {
                            Id = 16L,
                            IsoCode = "tt",
                            Name = "Tatar"
                        },
                        new
                        {
                            Id = 17L,
                            IsoCode = "ba",
                            Name = "Bashkir"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatsName")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = "USA",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@org1.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LatsName = "Doe",
                            Name = "ESG Global",
                            PostalCode = "12345",
                            RegistrationId = "REG-001",
                            State = 1,
                            StreetAddress = "123 Main St",
                            StreetNumber = "456",
                            TenantId = 1L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(598),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(599),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(600),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "AdminEE"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "ClientAdmin"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "ESG Global"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UnitOfMeasureTypeId");

                    b.ToTable("UnitOfMeasures");

                    b.HasData(
                        new
                        {
                            Id = 101L,
                            Code = "hh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(673),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(673),
                            LongText = "Hour",
                            Name = "time",
                            OrganizationId = 1L,
                            ShortText = "Hr",
                            State = 1,
                            UnitOfMeasureTypeId = 4L
                        },
                        new
                        {
                            Id = 102L,
                            Code = "mm",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(676),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(676),
                            LongText = "Minute",
                            Name = "time",
                            OrganizationId = 1L,
                            ShortText = "Min",
                            State = 1,
                            UnitOfMeasureTypeId = 4L
                        },
                        new
                        {
                            Id = 103L,
                            Code = "ss",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(678),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(679),
                            LongText = "Second",
                            Name = "time",
                            OrganizationId = 1L,
                            ShortText = "Sec",
                            State = 1,
                            UnitOfMeasureTypeId = 4L
                        },
                        new
                        {
                            Id = 104L,
                            Code = "d",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(680),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(681),
                            LongText = "Day",
                            Name = "time",
                            OrganizationId = 1L,
                            ShortText = "Day",
                            State = 1,
                            UnitOfMeasureTypeId = 4L
                        },
                        new
                        {
                            Id = 105L,
                            Code = "m",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(683),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(683),
                            LongText = "Month",
                            Name = "time",
                            OrganizationId = 1L,
                            ShortText = "Month",
                            State = 1,
                            UnitOfMeasureTypeId = 4L
                        },
                        new
                        {
                            Id = 106L,
                            Code = "q",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(685),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(686),
                            LongText = "Quarter",
                            Name = "time",
                            OrganizationId = 1L,
                            ShortText = "Qrtr",
                            State = 1,
                            UnitOfMeasureTypeId = 4L
                        },
                        new
                        {
                            Id = 107L,
                            Code = "y",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(687),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(688),
                            LongText = "Year",
                            Name = "time",
                            OrganizationId = 1L,
                            ShortText = "Year",
                            State = 1,
                            UnitOfMeasureTypeId = 4L
                        },
                        new
                        {
                            Id = 108L,
                            Code = "mMol/l",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(690),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(690),
                            LongText = "Millimol per liter",
                            Name = "acidbasecapacity",
                            OrganizationId = 1L,
                            ShortText = "mMol/l",
                            State = 1,
                            UnitOfMeasureTypeId = 1L
                        },
                        new
                        {
                            Id = 109L,
                            Code = "Mol/m3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(693),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(693),
                            LongText = "Mol per cubic meter",
                            Name = "acidbasecapacity",
                            OrganizationId = 1L,
                            ShortText = "Mol/m3",
                            State = 1,
                            UnitOfMeasureTypeId = 1L
                        },
                        new
                        {
                            Id = 110L,
                            Code = "Mol/l",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(695),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(695),
                            LongText = "Mol per liter",
                            Name = "acidbasecapacity",
                            OrganizationId = 1L,
                            ShortText = "Mol/l",
                            State = 1,
                            UnitOfMeasureTypeId = 1L
                        },
                        new
                        {
                            Id = 111L,
                            Code = "acre",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(697),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(698),
                            LongText = "Acre",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Acre",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 112L,
                            Code = "ha",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(700),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(700),
                            LongText = "Hectare",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Ha",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 113L,
                            Code = "yd2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(702),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(702),
                            LongText = "Square Yard",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Yd2",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 114L,
                            Code = "cm2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(704),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(705),
                            LongText = "Square centimeter",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Cm2",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 115L,
                            Code = "ft2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(706),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(707),
                            LongText = "Square foot",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Ft2",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 116L,
                            Code = "Inch2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(708),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(709),
                            LongText = "Square inch",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Inch2",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 117L,
                            Code = "km2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(712),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(712),
                            LongText = "Square kilometer",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Km2",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 118L,
                            Code = "m2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(714),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(714),
                            LongText = "Square meter",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "M2",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 119L,
                            Code = "Mile2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(716),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(716),
                            LongText = "Square mile",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Mile2",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 120L,
                            Code = "mm2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(718),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(719),
                            LongText = "Square millimeter",
                            Name = "area",
                            OrganizationId = 1L,
                            ShortText = "Mm2",
                            State = 1,
                            UnitOfMeasureTypeId = 2L
                        },
                        new
                        {
                            Id = 121L,
                            Code = "g/m3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(720),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(721),
                            LongText = "Gram/Cubic meter",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "G/M3",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 122L,
                            Code = "g/cm3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(722),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(723),
                            LongText = "Gram/cubic centimeter",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "G/Cm3",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 123L,
                            Code = "g/l",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(725),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(725),
                            LongText = "Gram/liter",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "G/L",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 124L,
                            Code = "kg/scf",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(728),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(728),
                            LongText = "Kilogram/Standard Cubic Foot",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "Kg/Scf",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 125L,
                            Code = "kg/bbl",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(730),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(731),
                            LongText = "Kilogram/US Barrel",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "Kg/Bbl",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 126L,
                            Code = "kg/dm3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(732),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(733),
                            LongText = "Kilogram/cubic decimeter",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "Kg/Dm3",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 127L,
                            Code = "kg/m3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(734),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(735),
                            LongText = "Kilogram/cubic meter",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "Kg/M3",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 128L,
                            Code = "µg/m3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(737),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(737),
                            LongText = "Microgram/cubic meter",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "µg/M3",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 129L,
                            Code = "µg/l",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(739),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(739),
                            LongText = "Microgram/liter",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "µg/L",
                            State = 1,
                            UnitOfMeasureTypeId = 3L
                        },
                        new
                        {
                            Id = 130L,
                            Code = "mg/m3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(766),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(767),
                            LongText = "Milligram/cubic meter",
                            Name = "density",
                            OrganizationId = 1L,
                            ShortText = "Mg/M3",
                            State = 1,
                            UnitOfMeasureTypeId = 4L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTranslations", b =>
                {
                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UnitOfMeasureTranslations");

                    b.HasData(
                        new
                        {
                            UnitOfMeasureId = 101L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(797),
                            Id = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(798),
                            LongText = "Hour",
                            Name = "Hour",
                            ShortText = "Hr",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 102L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(801),
                            Id = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(801),
                            LongText = "Minute",
                            Name = "Minute",
                            ShortText = "Min",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 103L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(803),
                            Id = 3L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(804),
                            LongText = "Second",
                            Name = "Second",
                            ShortText = "Sec",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 104L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(806),
                            Id = 4L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(806),
                            LongText = "Day",
                            Name = "Day",
                            ShortText = "Day",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 105L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(808),
                            Id = 5L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(808),
                            LongText = "Month",
                            Name = "Month",
                            ShortText = "Month",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 106L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(810),
                            Id = 6L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(810),
                            LongText = "Quarter",
                            Name = "Quarter",
                            ShortText = "Qrtr",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 107L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(812),
                            Id = 7L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(813),
                            LongText = "Year",
                            Name = "Year",
                            ShortText = "Year",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 108L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(814),
                            Id = 8L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(815),
                            LongText = "Millimol per liter",
                            Name = "Millimol per liter",
                            ShortText = "mMol/l",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 109L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(816),
                            Id = 9L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(817),
                            LongText = "Mol per cubic meter",
                            Name = "Mol per cubic meter",
                            ShortText = "Mol/m3",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 110L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(819),
                            Id = 10L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(820),
                            LongText = "Mol per liter",
                            Name = "Mol per liter",
                            ShortText = "Mol/l",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 111L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(821),
                            Id = 11L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(822),
                            LongText = "Acre",
                            Name = "Acre",
                            ShortText = "Acre",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 112L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(824),
                            Id = 12L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(824),
                            LongText = "Hectare",
                            Name = "Hectare",
                            ShortText = "Ha",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 113L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(826),
                            Id = 13L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(826),
                            LongText = "Square Yard",
                            Name = "Square Yard",
                            ShortText = "Yd2",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 114L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(829),
                            Id = 14L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(830),
                            LongText = "Square centimeter",
                            Name = "Square centimeter",
                            ShortText = "Cm2",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 115L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(831),
                            Id = 15L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(832),
                            LongText = "Square foot",
                            Name = "Square foot",
                            ShortText = "Ft2",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 116L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(833),
                            Id = 16L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(834),
                            LongText = "Square inch",
                            Name = "Square inch",
                            ShortText = "Inch2",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 117L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(835),
                            Id = 17L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(836),
                            LongText = "Square kilometer",
                            Name = "Square kilometer",
                            ShortText = "Km2",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 118L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(837),
                            Id = 18L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(839),
                            LongText = "Square meter",
                            Name = "Square meter",
                            ShortText = "M2",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 119L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(840),
                            Id = 19L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(841),
                            LongText = "Square mile",
                            Name = "Square mile",
                            ShortText = "Mile2",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 120L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(842),
                            Id = 20L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(843),
                            LongText = "Square millimeter",
                            Name = "Square millimeter",
                            ShortText = "Mm2",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 121L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(844),
                            Id = 21L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(845),
                            LongText = "Gram/Cubic meter",
                            Name = "Gram/Cubic meter",
                            ShortText = "G/M3",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 122L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(846),
                            Id = 22L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(847),
                            LongText = "Gram/cubic centimeter",
                            Name = "Gram/cubic centimeter",
                            ShortText = "G/Cm3",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 123L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(848),
                            Id = 23L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(849),
                            LongText = "Gram/liter",
                            Name = "Gram/liter",
                            ShortText = "G/L",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 124L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(850),
                            Id = 24L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(851),
                            LongText = "Kilogram/Standard Cubic Foot",
                            Name = "Kilogram/Standard Cubic Foot",
                            ShortText = "Kg/Scf",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 125L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(852),
                            Id = 25L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(853),
                            LongText = "Kilogram/US Barrel",
                            Name = "Kilogram/US Barrel",
                            ShortText = "Kg/Bbl",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 126L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(854),
                            Id = 26L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(855),
                            LongText = "Kilogram/cubic decimeter",
                            Name = "Kilogram/cubic decimeter",
                            ShortText = "Kg/Dm3",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 127L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(858),
                            Id = 27L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(858),
                            LongText = "Kilogram/cubic meter",
                            Name = "Kilogram/cubic meter",
                            ShortText = "Kg/M3",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 128L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(860),
                            Id = 28L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(860),
                            LongText = "Microgram/cubic meter",
                            Name = "Microgram/cubic meter",
                            ShortText = "µg/M3",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 129L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(862),
                            Id = 29L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(862),
                            LongText = "Microgram/liter",
                            Name = "Microgram/liter",
                            ShortText = "µg/L",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureId = 130L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(864),
                            Id = 30L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(864),
                            LongText = "Milligram/cubic meter",
                            Name = "Milligram/cubic meter",
                            ShortText = "Mg/M3",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UnitOfMeasureTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "acidbasecapacity",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(640),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(641),
                            LongText = "",
                            Name = "Acid/Base capacity",
                            OrganizationId = 1L,
                            ShortText = "Acid/Base capacity",
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            Code = "area",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(647),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(648),
                            LongText = "",
                            Name = "Area",
                            OrganizationId = 1L,
                            ShortText = "Area",
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            Code = "density",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(650),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(651),
                            LongText = "",
                            Name = "Density",
                            OrganizationId = 1L,
                            ShortText = "Density",
                            State = 1
                        },
                        new
                        {
                            Id = 4L,
                            Code = "time",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(653),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(653),
                            LongText = "",
                            Name = "Time",
                            OrganizationId = 1L,
                            ShortText = "Time",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTypeTranslations", b =>
                {
                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureTypeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UnitOfMeasureTypeTranslations");

                    b.HasData(
                        new
                        {
                            UnitOfMeasureTypeId = 1L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(895),
                            Id = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(896),
                            LongText = "Acid/Base capacity",
                            Name = "Acid/Base capacity",
                            ShortText = "Acid/Base capacity",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureTypeId = 2L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(898),
                            Id = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(899),
                            LongText = "Area",
                            Name = "Area",
                            ShortText = "Area",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureTypeId = 3L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(900),
                            Id = 3L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(901),
                            LongText = "Density",
                            Name = "Density",
                            ShortText = "Density",
                            State = 1
                        },
                        new
                        {
                            UnitOfMeasureTypeId = 4L,
                            LanguageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(902),
                            Id = 4L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(903),
                            LongText = "Time",
                            Name = "Time",
                            ShortText = "Time",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizationUserId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecurityStamp")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(530),
                            Email = "user1@example.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LastName = "Doe",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 49 },
                            PhoneNumber = "1234567890",
                            SecurityStamp = new Guid("045de448-b324-4125-8c1c-d4398f0184df"),
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(535),
                            Email = "user2@example.com",
                            FirstName = "Jane",
                            LanguageId = 1L,
                            LastName = "Smith",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 50 },
                            PhoneNumber = "0987654321",
                            SecurityStamp = new Guid("132cb155-5352-4d46-a1d8-40eb8216db04"),
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(538),
                            Email = "user3@example.com",
                            FirstName = "Alice",
                            LanguageId = 1L,
                            LastName = "Johnson",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 51 },
                            PhoneNumber = "2345678901",
                            SecurityStamp = new Guid("c5d5a195-de1d-48f6-9c96-012137780ccd"),
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(618),
                            RoleId = 1L,
                            State = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(620),
                            RoleId = 2L,
                            State = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 21, 5, 28, 12, 222, DateTimeKind.Utc).AddTicks(621),
                            RoleId = 3L,
                            State = 1,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DataPointTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("DataPointTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ESG.Domain.Entities.Currency", null)
                        .WithMany("DataPointValues")
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointType")
                        .WithMany("DataPointValues")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DataPointValues")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("DataPointValues")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureType")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureTypeId");

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", null)
                        .WithOne("DataPointValues")
                        .HasForeignKey("ESG.Domain.Entities.DataPointValues", "UnitOfMeasureTypeId1");

                    b.Navigation("Currency");

                    b.Navigation("DataPointType");

                    b.Navigation("Language");

                    b.Navigation("Organization");

                    b.Navigation("UnitOfMeasureType");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointModel", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointTypes")
                        .WithMany()
                        .HasForeignKey("DataPointTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Dimensions", "Dimentions")
                        .WithMany()
                        .HasForeignKey("DimentionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointTypes");

                    b.Navigation("Dimentions");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointTypeTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointTypes")
                        .WithMany("DataPointTypeTranslations")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.DataPointValues", null)
                        .WithMany("DatapointTypeTranslations")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DatapointTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointTypes");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointValueTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DataPointValues", "DataPointValues")
                        .WithMany()
                        .HasForeignKey("DatapointValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DatapointValueTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointValues");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Dimensions", "Dimensions")
                        .WithMany("DimensionTranslations")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DimensionTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimensions");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DimensionTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("DimensionType")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionTypeTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DimensionType", "DimensionType")
                        .WithMany("DimensionTypeTranslations")
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("DimensionTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DimensionType", "DimensionType")
                        .WithMany("Dimensions")
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("Dimensions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("Dimensions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Hierarchy", b =>
                {
                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointTypes")
                        .WithMany()
                        .HasForeignKey("DataPointTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Dimensions", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointTypes");

                    b.Navigation("Dimension");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Organization", null)
                        .WithMany("Languages")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Organizations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Organization", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureTypes")
                        .WithMany("UnitOfMeasure")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");

                    b.Navigation("UnitOfMeasureTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("UnitOfMeasureTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany("UnitOfMeasureTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTypeTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany("UnitOfMeasureTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureType")
                        .WithMany("UnitOfMeasureTypeTranslations")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasureType");
                });

            modelBuilder.Entity("ESG.Domain.Entities.User", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.OrganizationUser", null)
                        .WithMany("Users")
                        .HasForeignKey("OrganizationUserId");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Currency", b =>
                {
                    b.Navigation("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.Navigation("DataPointTypeTranslations");

                    b.Navigation("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.Navigation("DatapointTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.Navigation("DimensionTypeTranslations");

                    b.Navigation("Dimensions");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.Navigation("DimensionTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.Navigation("DataPointTypes");

                    b.Navigation("DataPointValues");

                    b.Navigation("DatapointTypeTranslations");

                    b.Navigation("DatapointValueTranslations");

                    b.Navigation("DimensionTranslations");

                    b.Navigation("DimensionTypeTranslations");

                    b.Navigation("DimensionTypes");

                    b.Navigation("Dimensions");

                    b.Navigation("UnitOfMeasureTranslations");

                    b.Navigation("UnitOfMeasureTypeTranslations");

                    b.Navigation("UnitOfMeasureTypes");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.Navigation("DataPointTypes");

                    b.Navigation("DataPointValues");

                    b.Navigation("DimensionType");

                    b.Navigation("Dimensions");

                    b.Navigation("Languages");

                    b.Navigation("UnitOfMeasureTypes");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("UnitOfMeasureTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.Navigation("DataPointValues");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("UnitOfMeasureTypeTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
