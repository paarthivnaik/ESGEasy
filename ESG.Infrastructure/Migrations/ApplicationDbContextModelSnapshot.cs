// <auto-generated />
using System;
using ESG.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ESG.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ESG.Domain.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrencyCode = "USD",
                            LongText = "United States Dollar",
                            Name = "US Dollar",
                            ShortText = "USD"
                        },
                        new
                        {
                            Id = 2L,
                            CurrencyCode = "EUR",
                            LongText = "Euro",
                            Name = "Euro",
                            ShortText = "EUR"
                        },
                        new
                        {
                            Id = 3L,
                            CurrencyCode = "INR",
                            LongText = "Indian Rupee",
                            Name = "Indian Rupee",
                            ShortText = "INR"
                        },
                        new
                        {
                            Id = 4L,
                            CurrencyCode = "GBP",
                            LongText = "British Pound Sterling",
                            Name = "British Pound",
                            ShortText = "GBP"
                        },
                        new
                        {
                            Id = 5L,
                            CurrencyCode = "CAD",
                            LongText = "Canadian Dollar",
                            Name = "Canadian Dollar",
                            ShortText = "CAD"
                        },
                        new
                        {
                            Id = 6L,
                            CurrencyCode = "AUD",
                            LongText = "Australian Dollar",
                            Name = "Australian Dollar",
                            ShortText = "AUD"
                        },
                        new
                        {
                            Id = 7L,
                            CurrencyCode = "JPY",
                            LongText = "Japanese Yen",
                            Name = "Japanese Yen",
                            ShortText = "JPY"
                        },
                        new
                        {
                            Id = 8L,
                            CurrencyCode = "CHF",
                            LongText = "Swiss Franc",
                            Name = "Swiss Franc",
                            ShortText = "CHF"
                        },
                        new
                        {
                            Id = 9L,
                            CurrencyCode = "CNY",
                            LongText = "Chinese Yuan Renminbi",
                            Name = "Chinese Yuan",
                            ShortText = "CNY"
                        },
                        new
                        {
                            Id = 10L,
                            CurrencyCode = "RUB",
                            LongText = "Russian Ruble",
                            Name = "Russian Ruble",
                            ShortText = "RUB"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DataPointTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4607),
                            LanguageId = 1L,
                            LongText = "Type 1",
                            Name = "DatapointType1",
                            ShortText = "T1",
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            OrganizationId = 1L,
                            CreatedBy = 2L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4610),
                            LanguageId = 2L,
                            LongText = "Type 2",
                            Name = "DatapointType2",
                            ShortText = "T2",
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            OrganizationId = 1L,
                            CreatedBy = 3L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4613),
                            LanguageId = 3L,
                            LongText = "Type 3",
                            Name = "DatapointType3",
                            ShortText = "T3",
                            State = 1
                        },
                        new
                        {
                            Id = 5L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4615),
                            LanguageId = 1L,
                            LongText = "Type 5",
                            Name = "DatapointType5",
                            ShortText = "T5",
                            State = 1
                        },
                        new
                        {
                            Id = 6L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4617),
                            LanguageId = 1L,
                            LongText = "Type 6",
                            Name = "DatapointType6",
                            ShortText = "T6",
                            State = 1
                        },
                        new
                        {
                            Id = 7L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4619),
                            LanguageId = 1L,
                            LongText = "Type 7",
                            Name = "DatapointType7",
                            ShortText = "T7",
                            State = 1
                        },
                        new
                        {
                            Id = 8L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4621),
                            LanguageId = 1L,
                            LongText = "Type 8",
                            Name = "DatapointType8",
                            ShortText = "T8",
                            State = 1
                        },
                        new
                        {
                            Id = 9L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4622),
                            LanguageId = 1L,
                            LongText = "Type 9",
                            Name = "DatapointType9",
                            ShortText = "T9",
                            State = 1
                        },
                        new
                        {
                            Id = 10L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4624),
                            LanguageId = 1L,
                            LongText = "Type 10",
                            Name = "DatapointType10",
                            ShortText = "T10",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCurrency")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNarrative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUOM")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("DatapointTypeId", "OrganizationId");

                    b.ToTable("DataPointValues");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4667),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 1L,
                            Name = "DataPointValue1",
                            Purpose = "Purpose 1",
                            State = 1,
                            Value = "Value 1"
                        },
                        new
                        {
                            Id = 2L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4671),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsNarrative = false,
                            IsUOM = true,
                            LanguageId = 1L,
                            Name = "DataPointValue2",
                            Purpose = "Purpose 2",
                            State = 1,
                            Value = "Value 2"
                        },
                        new
                        {
                            Id = 3L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4674),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 1L,
                            Name = "DataPointValue3",
                            Purpose = "Purpose 3",
                            State = 1,
                            Value = "Value 3"
                        },
                        new
                        {
                            Id = 4L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4676),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsNarrative = true,
                            IsUOM = false,
                            LanguageId = 1L,
                            Name = "DataPointValue4",
                            Purpose = "Purpose 4",
                            State = 1,
                            Value = "Value 4"
                        },
                        new
                        {
                            Id = 5L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4679),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 1L,
                            Name = "DataPointValue5",
                            Purpose = "Purpose 5",
                            State = 1,
                            Value = "Value 5"
                        },
                        new
                        {
                            Id = 6L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4682),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsNarrative = false,
                            IsUOM = true,
                            LanguageId = 1L,
                            Name = "DataPointValue6",
                            Purpose = "Purpose 6",
                            State = 1,
                            Value = "Value 6"
                        },
                        new
                        {
                            Id = 7L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4684),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 2L,
                            Name = "DataPointValue7",
                            Purpose = "Purpose 7",
                            State = 1,
                            Value = "Value 7"
                        },
                        new
                        {
                            Id = 8L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4687),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsNarrative = true,
                            IsUOM = false,
                            LanguageId = 2L,
                            Name = "DataPointValue8",
                            Purpose = "Purpose 8",
                            State = 1,
                            Value = "Value 8"
                        },
                        new
                        {
                            Id = 9L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4690),
                            DatapointTypeId = 1L,
                            IsCurrency = true,
                            IsNarrative = false,
                            IsUOM = false,
                            LanguageId = 2L,
                            Name = "DataPointValue9",
                            Purpose = "Purpose 9",
                            State = 1,
                            Value = "Value 9"
                        },
                        new
                        {
                            Id = 10L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4693),
                            DatapointTypeId = 1L,
                            IsCurrency = false,
                            IsNarrative = false,
                            IsUOM = true,
                            LanguageId = 2L,
                            Name = "DataPointValue10",
                            Purpose = "Purpose 10",
                            State = 1,
                            Value = "Value 10"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointId")
                        .HasColumnType("bigint");

                    b.Property<long>("DimentionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortingType")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("DatapointId", "OrganizationId");

                    b.HasIndex("DimentionsId", "OrganizationId");

                    b.ToTable("DatapointModel");

                    b.HasData(
                        new
                        {
                            Id = 10L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatapointId = 1L,
                            DimentionsId = 100L,
                            SortingType = 0,
                            State = 1
                        },
                        new
                        {
                            Id = 11L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatapointId = 1L,
                            DimentionsId = 101L,
                            SortingType = 1,
                            State = 1
                        },
                        new
                        {
                            Id = 12L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatapointId = 1L,
                            DimentionsId = 102L,
                            SortingType = 2,
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHeirarchialDimention")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DimensionTypes");

                    b.HasData(
                        new
                        {
                            Id = 50L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4724),
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 1",
                            Name = "DimensionType1",
                            ShortText = "DT1",
                            State = 1
                        },
                        new
                        {
                            Id = 51L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4726),
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension Type 2",
                            Name = "DimensionType2",
                            ShortText = "DT2",
                            State = 1
                        },
                        new
                        {
                            Id = 52L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4729),
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 3",
                            Name = "DimensionType3",
                            ShortText = "DT3",
                            State = 1
                        },
                        new
                        {
                            Id = 53L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4731),
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 4",
                            Name = "DimensionType4",
                            ShortText = "DT4",
                            State = 1
                        },
                        new
                        {
                            Id = 54L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4733),
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 5",
                            Name = "DimensionType5",
                            ShortText = "DT5",
                            State = 1
                        },
                        new
                        {
                            Id = 55L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4735),
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension Type 6",
                            Name = "DimensionType6",
                            ShortText = "DT6",
                            State = 1
                        },
                        new
                        {
                            Id = 56L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4737),
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 7",
                            Name = "DimensionType7",
                            ShortText = "DT7",
                            State = 1
                        },
                        new
                        {
                            Id = 57L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4739),
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension Type 8",
                            Name = "DimensionType8",
                            ShortText = "DT8",
                            State = 1
                        },
                        new
                        {
                            Id = 58L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4818),
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Dimension Type 9",
                            Name = "DimensionType9",
                            ShortText = "DT9",
                            State = 1
                        },
                        new
                        {
                            Id = 59L,
                            OrganizationId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4820),
                            IsHeirarchialDimention = false,
                            LanguageId = 1L,
                            LongText = "Dimension Type 10",
                            Name = "DimensionType10",
                            ShortText = "DT10",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DimentionTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsHeirarchialDimention")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id", "OrganizationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("DimentionTypeId", "OrganizationId");

                    b.ToTable("Dimensions");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimentionTypeId = 50L,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Long Description 1",
                            Name = "Dimension 1",
                            ShortText = "Short 1",
                            State = 1
                        },
                        new
                        {
                            Id = 101L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimentionTypeId = 50L,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Long Description 2",
                            Name = "Dimension 2",
                            ShortText = "Short 2",
                            State = 1
                        },
                        new
                        {
                            Id = 102L,
                            OrganizationId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimentionTypeId = 51L,
                            IsHeirarchialDimention = true,
                            LanguageId = 1L,
                            LongText = "Long Description 3",
                            Name = "Dimension 3",
                            ShortText = "Short 3",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsoCode = "ru",
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 2L,
                            IsoCode = "uk",
                            Name = "Ukrainian"
                        },
                        new
                        {
                            Id = 3L,
                            IsoCode = "be",
                            Name = "Belarusian"
                        },
                        new
                        {
                            Id = 4L,
                            IsoCode = "et",
                            Name = "Estonian"
                        },
                        new
                        {
                            Id = 5L,
                            IsoCode = "lv",
                            Name = "Latvian"
                        },
                        new
                        {
                            Id = 6L,
                            IsoCode = "lt",
                            Name = "Lithuanian"
                        },
                        new
                        {
                            Id = 7L,
                            IsoCode = "ka",
                            Name = "Georgian"
                        },
                        new
                        {
                            Id = 8L,
                            IsoCode = "hy",
                            Name = "Armenian"
                        },
                        new
                        {
                            Id = 9L,
                            IsoCode = "az",
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            Id = 10L,
                            IsoCode = "kk",
                            Name = "Kazakh"
                        },
                        new
                        {
                            Id = 11L,
                            IsoCode = "uz",
                            Name = "Uzbek"
                        },
                        new
                        {
                            Id = 12L,
                            IsoCode = "tk",
                            Name = "Turkmen"
                        },
                        new
                        {
                            Id = 13L,
                            IsoCode = "tg",
                            Name = "Tajik"
                        },
                        new
                        {
                            Id = 14L,
                            IsoCode = "ky",
                            Name = "Kyrgyz"
                        },
                        new
                        {
                            Id = 15L,
                            IsoCode = "mo",
                            Name = "Moldovan"
                        },
                        new
                        {
                            Id = 16L,
                            IsoCode = "tt",
                            Name = "Tatar"
                        },
                        new
                        {
                            Id = 17L,
                            IsoCode = "ba",
                            Name = "Bashkir"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatsName")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TenantId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = "USA",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@org1.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LatsName = "Doe",
                            Name = "ESG Organization",
                            PostalCode = "12345",
                            RegistrationId = "REG-001",
                            State = 1,
                            StreetAddress = "123 Main St",
                            StreetNumber = "456",
                            TenantId = 1L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(5027),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(5029),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(5031),
                            OrganizationId = 1L,
                            State = 1,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "AdminEE"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "ClientAdmin"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "ESG"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UnitOfMeasureTypeId");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTranslations", b =>
                {
                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LanguageId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageId1");

                    b.ToTable("UnitOfMeasureTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("UnitOfMeasureTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTypeTranslations", b =>
                {
                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureTypeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UnitOfMeasureTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizationUserId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecurityStamp")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrganizationUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(4995),
                            Email = "user1@example.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LastName = "Doe",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 49 },
                            PhoneNumber = "1234567890",
                            SecurityStamp = new Guid("b558a327-3bd3-45cb-950e-f3b5f0f41fca"),
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(5001),
                            Email = "user2@example.com",
                            FirstName = "Jane",
                            LanguageId = 1L,
                            LastName = "Smith",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 50 },
                            PhoneNumber = "0987654321",
                            SecurityStamp = new Guid("d2f24faa-cb76-4b19-bae1-627a72ed31a1"),
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(5005),
                            Email = "user3@example.com",
                            FirstName = "Alice",
                            LanguageId = 1L,
                            LastName = "Johnson",
                            Password = new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 51 },
                            PhoneNumber = "2345678901",
                            SecurityStamp = new Guid("d01e273f-e745-4b01-b17b-5b2669d5cc23"),
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(5087),
                            RoleId = 1L,
                            State = 1,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(5088),
                            RoleId = 2L,
                            State = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 8, 10, 18, 27, 12, 530, DateTimeKind.Utc).AddTicks(5090),
                            RoleId = 3L,
                            State = 1,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointValues", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointType")
                        .WithMany("DataPointValues")
                        .HasForeignKey("DatapointTypeId", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointType");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DatapointModel", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.DataPointTypes", "DataPointTypes")
                        .WithMany("DatapointModels")
                        .HasForeignKey("DatapointId", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Dimensions", "Dimentions")
                        .WithMany("DatapointModels")
                        .HasForeignKey("DimentionsId", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointTypes");

                    b.Navigation("Dimentions");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.DimensionType", "DimensionType")
                        .WithMany("Dimensions")
                        .HasForeignKey("DimentionTypeId", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Organization", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Organizations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Organization", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureTypes")
                        .WithMany("UnitOfMeasure")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasureTypes");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.Language", null)
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("LanguageId1");

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureTypeTranslations", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.UnitOfMeasureType", "UnitOfMeasureType")
                        .WithMany("UnitOfMeasureTypeTranslations")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasureType");
                });

            modelBuilder.Entity("ESG.Domain.Entities.User", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.OrganizationUser", null)
                        .WithMany("Users")
                        .HasForeignKey("OrganizationUserId");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ESG.Domain.Entities.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Entities.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DataPointTypes", b =>
                {
                    b.Navigation("DataPointValues");

                    b.Navigation("DatapointModels");
                });

            modelBuilder.Entity("ESG.Domain.Entities.DimensionType", b =>
                {
                    b.Navigation("Dimensions");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Dimensions", b =>
                {
                    b.Navigation("DatapointModels");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Language", b =>
                {
                    b.Navigation("UnitOfMeasureTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.OrganizationUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("UnitOfMeasureTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Entities.UnitOfMeasureType", b =>
                {
                    b.Navigation("UnitOfMeasure");

                    b.Navigation("UnitOfMeasureTypeTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
