// <auto-generated />
using System;
using ESG.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ESG.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241129095138_Initial-migration seeding")]
    partial class Initialmigrationseeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("amendments_id_seq");

            modelBuilder.HasSequence("UploadedFile_Id_seq");

            modelBuilder.Entity("ESG.Domain.Models.Amendment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("DatapointId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FilterCombinationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("Amendments_pkey");

                    b.HasIndex(new[] { "FilterCombinationId" }, "fki_FK_Amendments1-FilterCombinationId");

                    b.HasIndex(new[] { "DatapointId" }, "fki_FK_Amendments_DataPointValuesId");

                    b.HasIndex(new[] { "OrganizationId" }, "fki_FK_Amendments_Organization_OrganizationId");

                    b.ToTable("Amendments");
                });

            modelBuilder.Entity("ESG.Domain.Models.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ESG.Domain.Models.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "idx_currency_id");

                    b.ToTable("Currency", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrencyCode = "USD",
                            LongText = "United States Dollar",
                            Name = "US Dollar",
                            ShortText = "USD"
                        },
                        new
                        {
                            Id = 2L,
                            CurrencyCode = "EUR",
                            LongText = "Euro",
                            Name = "Euro",
                            ShortText = "EUR"
                        },
                        new
                        {
                            Id = 3L,
                            CurrencyCode = "JPY",
                            LongText = "Japanese Yen",
                            Name = "Japanese Yen",
                            ShortText = "JPY"
                        },
                        new
                        {
                            Id = 4L,
                            CurrencyCode = "GBP",
                            LongText = "British Pound Sterling",
                            Name = "British Pound",
                            ShortText = "GBP"
                        },
                        new
                        {
                            Id = 5L,
                            CurrencyCode = "AUD",
                            LongText = "Australian Dollar",
                            Name = "Australian Dollar",
                            ShortText = "AUD"
                        },
                        new
                        {
                            Id = 6L,
                            CurrencyCode = "CAD",
                            LongText = "Canadian Dollar",
                            Name = "Canadian Dollar",
                            ShortText = "CAD"
                        },
                        new
                        {
                            Id = 7L,
                            CurrencyCode = "CHF",
                            LongText = "Swiss Franc",
                            Name = "Swiss Franc",
                            ShortText = "CHF"
                        },
                        new
                        {
                            Id = 8L,
                            CurrencyCode = "CNY",
                            LongText = "Chinese Yuan Renminbi",
                            Name = "Chinese Yuan",
                            ShortText = "CNY"
                        },
                        new
                        {
                            Id = 9L,
                            CurrencyCode = "HKD",
                            LongText = "Hong Kong Dollar",
                            Name = "Hong Kong Dollar",
                            ShortText = "HKD"
                        },
                        new
                        {
                            Id = 10L,
                            CurrencyCode = "NZD",
                            LongText = "New Zealand Dollar",
                            Name = "New Zealand Dollar",
                            ShortText = "NZD"
                        },
                        new
                        {
                            Id = 11L,
                            CurrencyCode = "SEK",
                            LongText = "Swedish Krona",
                            Name = "Swedish Krona",
                            ShortText = "SEK"
                        },
                        new
                        {
                            Id = 12L,
                            CurrencyCode = "KRW",
                            LongText = "South Korean Won",
                            Name = "South Korean Won",
                            ShortText = "KRW"
                        },
                        new
                        {
                            Id = 13L,
                            CurrencyCode = "SGD",
                            LongText = "Singapore Dollar",
                            Name = "Singapore Dollar",
                            ShortText = "SGD"
                        },
                        new
                        {
                            Id = 14L,
                            CurrencyCode = "NOK",
                            LongText = "Norwegian Krone",
                            Name = "Norwegian Krone",
                            ShortText = "NOK"
                        },
                        new
                        {
                            Id = 15L,
                            CurrencyCode = "MXN",
                            LongText = "Mexican Peso",
                            Name = "Mexican Peso",
                            ShortText = "MXN"
                        },
                        new
                        {
                            Id = 16L,
                            CurrencyCode = "INR",
                            LongText = "Indian Rupee",
                            Name = "Indian Rupee",
                            ShortText = "INR"
                        },
                        new
                        {
                            Id = 17L,
                            CurrencyCode = "BRL",
                            LongText = "Brazilian Real",
                            Name = "Brazilian Real",
                            ShortText = "BRL"
                        },
                        new
                        {
                            Id = 18L,
                            CurrencyCode = "ZAR",
                            LongText = "South African Rand",
                            Name = "South African Rand",
                            ShortText = "ZAR"
                        },
                        new
                        {
                            Id = 19L,
                            CurrencyCode = "RUB",
                            LongText = "Russian Ruble",
                            Name = "Russian Ruble",
                            ShortText = "RUB"
                        },
                        new
                        {
                            Id = 20L,
                            CurrencyCode = "TRY",
                            LongText = "Turkish Lira",
                            Name = "Turkish Lira",
                            ShortText = "TRY"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefaultModel")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModelName")
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_DataModels_OrganizationId");

                    b.HasIndex(new[] { "Id" }, "idx_datamodels_id");

                    b.ToTable("DataModels");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModelFilter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("FilterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ModelConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DimensionTypeId" }, "IX_DataModelFilters_DimensionTypeId");

                    b.HasIndex(new[] { "FilterId" }, "IX_DataModelFilters_FilterId");

                    b.HasIndex(new[] { "ModelConfigurationId" }, "IX_DataModelFilters_ModelConfigurationId");

                    b.HasIndex(new[] { "Id" }, "idx_datamodelfilters_id");

                    b.ToTable("DataModelFilters");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModelValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountableUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ColumnId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CombinationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Consult")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DataModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataPointValuesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Inform")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ResponsibleUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RowId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountableUserId" }, "IX_DataModelValues_AccountableUserId");

                    b.HasIndex(new[] { "ColumnId" }, "IX_DataModelValues_ColumnId");

                    b.HasIndex(new[] { "CombinationId" }, "IX_DataModelValues_CombinationId");

                    b.HasIndex(new[] { "ResponsibleUserId" }, "IX_DataModelValues_ResponsibleUserId");

                    b.HasIndex(new[] { "RowId" }, "IX_DataModelValues_RowId");

                    b.HasIndex(new[] { "DataModelId" }, "fki_FK_DataModelValues_DataModel_DataModelId");

                    b.HasIndex(new[] { "Consult" }, "fki_FK_DataModelValues_Users_Consult");

                    b.HasIndex(new[] { "Inform" }, "fki_FK_DataModelValues_Users_Inform");

                    b.HasIndex(new[] { "DataPointValuesId" }, "fki_FK_DataPointValues_DatapointValuesId");

                    b.HasIndex(new[] { "DataModelId" }, "idx_datamodelvalues_datamodel_datamodelid");

                    b.HasIndex(new[] { "DataPointValuesId" }, "idx_datamodelvalues_datapointvaluesid");

                    b.HasIndex(new[] { "Id" }, "idx_datamodelvalues_id");

                    b.HasIndex(new[] { "DataModelId", "ResponsibleUserId" }, "idx_datamodelvalues_modelid_userid");

                    b.HasIndex(new[] { "DataModelId", "ResponsibleUserId", "DataPointValuesId" }, "idx_datamodelvalues_modelid_userid_datapoint");

                    b.HasIndex(new[] { "RowId", "ColumnId", "CombinationId", "DataPointValuesId" }, "unq_contraint_oncombinational_datapoint")
                        .IsUnique();

                    b.ToTable("DataModelValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataPointType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_DataPointTypes_LanguageId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_DataPointTypes_OrganizationId");

                    b.HasIndex(new[] { "Id" }, "idx_datapointtypes_id");

                    b.ToTable("DataPointType", (string)null);
                });

            modelBuilder.Entity("ESG.Domain.Models.DataPointValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DatapointTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DisclosureRequirementId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsNarrative")
                        .HasColumnType("boolean");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long?>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CurrencyId" }, "IX_DataPointValues_CurrencyId");

                    b.HasIndex(new[] { "DatapointTypeId" }, "IX_DataPointValues_DatapointTypeId");

                    b.HasIndex(new[] { "DisclosureRequirementId" }, "IX_DataPointValues_DisclosureRequirementId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_DataPointValues_LanguageId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_DataPointValues_OrganizationId");

                    b.HasIndex(new[] { "UnitOfMeasureId" }, "IX_DataPointValues_UnitOfMeasureId");

                    b.HasIndex(new[] { "UserId" }, "IX_DataPointValues_UserId");

                    b.HasIndex(new[] { "Id" }, "idx_datapointvalues_id");

                    b.ToTable("DataPointValue", (string)null);
                });

            modelBuilder.Entity("ESG.Domain.Models.DatapointTypeTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DatapointTypeId", "LanguageId" }, "IX_DatapointTypeTranslations_DatapointTypeId_LanguageId")
                        .IsUnique();

                    b.HasIndex(new[] { "LanguageId" }, "IX_DatapointTypeTranslations_LanguageId");

                    b.ToTable("DatapointTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Models.DatapointValueTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatapointValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DatapointValueId", "LanguageId" }, "IX_DatapointValueTranslations_DatapointValueId_LanguageId")
                        .IsUnique();

                    b.HasIndex(new[] { "LanguageId" }, "IX_DatapointValueTranslations_LanguageId");

                    b.ToTable("DatapointValueTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Models.Dimension", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DimensionTypeId" }, "IX_Dimensions_DimensionTypeId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_Dimensions_LanguageId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Dimensions_OrganizationId");

                    b.HasIndex(new[] { "Id" }, "idx_dimensions_id");

                    b.ToTable("Dimensions");

                    b.HasData(
                        new
                        {
                            Id = 1000L,
                            Code = "act",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5975),
                            DimensionTypeId = 5L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5976),
                            LongText = "Actual",
                            OrganizationId = 1L,
                            ShortText = "Actual",
                            State = 1
                        },
                        new
                        {
                            Id = 1001L,
                            Code = "base",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5979),
                            DimensionTypeId = 5L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5980),
                            LongText = "Baseline",
                            OrganizationId = 1L,
                            ShortText = "Baseline",
                            State = 1
                        },
                        new
                        {
                            Id = 1002L,
                            Code = "target",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5982),
                            DimensionTypeId = 5L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5982),
                            LongText = "Target",
                            OrganizationId = 1L,
                            ShortText = "Target",
                            State = 1
                        },
                        new
                        {
                            Id = 1003L,
                            Code = "de",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5985),
                            DimensionTypeId = 6L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5985),
                            LongText = "Germany",
                            OrganizationId = 1L,
                            ShortText = "DE",
                            State = 1
                        },
                        new
                        {
                            Id = 1004L,
                            Code = "nl",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5987),
                            DimensionTypeId = 6L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5988),
                            LongText = "The Netherlands",
                            OrganizationId = 1L,
                            ShortText = "NL",
                            State = 1
                        },
                        new
                        {
                            Id = 1005L,
                            Code = "dap",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5990),
                            DimensionTypeId = 12L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5990),
                            LongText = "Domestic Appliances",
                            OrganizationId = 1L,
                            ShortText = "DAP",
                            State = 1
                        },
                        new
                        {
                            Id = 1006L,
                            Code = "pms",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5993),
                            DimensionTypeId = 12L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5993),
                            LongText = "Medical systems",
                            OrganizationId = 1L,
                            ShortText = "PMS",
                            State = 1
                        },
                        new
                        {
                            Id = 1007L,
                            Code = "eur",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5995),
                            DimensionTypeId = 13L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5996),
                            LongText = "Europe",
                            OrganizationId = 1L,
                            ShortText = "EUR",
                            State = 1
                        },
                        new
                        {
                            Id = 1008L,
                            Code = "ame",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5998),
                            DimensionTypeId = 13L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5998),
                            LongText = "Africa, Middle East",
                            OrganizationId = 1L,
                            ShortText = "AME",
                            State = 1
                        },
                        new
                        {
                            Id = 1009L,
                            Code = "tern",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6000),
                            DimensionTypeId = 14L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6001),
                            LongText = "Terneuzen",
                            OrganizationId = 1L,
                            ShortText = "Terneuzen",
                            State = 1
                        },
                        new
                        {
                            Id = 1010L,
                            Code = "2023",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6003),
                            DimensionTypeId = 1L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6003),
                            LongText = "2023",
                            OrganizationId = 1L,
                            ShortText = "2023",
                            State = 1
                        },
                        new
                        {
                            Id = 1011L,
                            Code = "2024",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6005),
                            DimensionTypeId = 1L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6005),
                            LongText = "2024",
                            OrganizationId = 1L,
                            ShortText = "2024",
                            State = 1
                        },
                        new
                        {
                            Id = 1012L,
                            Code = "2025",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6007),
                            DimensionTypeId = 1L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6008),
                            LongText = "2025",
                            OrganizationId = 1L,
                            ShortText = "2025",
                            State = 1
                        },
                        new
                        {
                            Id = 1013L,
                            Code = "Jan",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6010),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6010),
                            LongText = "January",
                            OrganizationId = 1L,
                            ShortText = "January",
                            State = 1
                        },
                        new
                        {
                            Id = 1014L,
                            Code = "Feb",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6012),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6013),
                            LongText = "February",
                            OrganizationId = 1L,
                            ShortText = "February",
                            State = 1
                        },
                        new
                        {
                            Id = 1015L,
                            Code = "Mar",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6015),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6015),
                            LongText = "March",
                            OrganizationId = 1L,
                            ShortText = "March",
                            State = 1
                        },
                        new
                        {
                            Id = 1016L,
                            Code = "Apr",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6019),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6020),
                            LongText = "April",
                            OrganizationId = 1L,
                            ShortText = "April",
                            State = 1
                        },
                        new
                        {
                            Id = 1017L,
                            Code = "May",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6023),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6023),
                            LongText = "May",
                            OrganizationId = 1L,
                            ShortText = "May",
                            State = 1
                        },
                        new
                        {
                            Id = 1018L,
                            Code = "Jun",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6025),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6026),
                            LongText = "June",
                            OrganizationId = 1L,
                            ShortText = "June",
                            State = 1
                        },
                        new
                        {
                            Id = 1019L,
                            Code = "Jul",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6028),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6028),
                            LongText = "July",
                            OrganizationId = 1L,
                            ShortText = "July",
                            State = 1
                        },
                        new
                        {
                            Id = 1020L,
                            Code = "Aug",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6030),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6031),
                            LongText = "August",
                            OrganizationId = 1L,
                            ShortText = "August",
                            State = 1
                        },
                        new
                        {
                            Id = 1021L,
                            Code = "Sep",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6054),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6054),
                            LongText = "September",
                            OrganizationId = 1L,
                            ShortText = "September",
                            State = 1
                        },
                        new
                        {
                            Id = 1022L,
                            Code = "Oct",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6056),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6057),
                            LongText = "October",
                            OrganizationId = 1L,
                            ShortText = "October",
                            State = 1
                        },
                        new
                        {
                            Id = 1023L,
                            Code = "Nov",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6059),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6059),
                            LongText = "November",
                            OrganizationId = 1L,
                            ShortText = "November",
                            State = 1
                        },
                        new
                        {
                            Id = 1024L,
                            Code = "Dec",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6061),
                            DimensionTypeId = 2L,
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6062),
                            LongText = "December",
                            OrganizationId = 1L,
                            ShortText = "December",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.DimensionTranslation", b =>
                {
                    b.Property<long>("DimensionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("DimensionsId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_DimensionTranslations_LanguageId");

                    b.ToTable("DimensionTranslations");

                    b.HasData(
                        new
                        {
                            DimensionsId = 1000L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6093),
                            Id = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6094),
                            LongText = "Aktuell",
                            ShortText = "Aktuell",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1001L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6096),
                            Id = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6097),
                            LongText = "Basislinie",
                            ShortText = "Basislinie",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1002L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6098),
                            Id = 3L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6099),
                            LongText = "Ziel",
                            ShortText = "Ziel",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1003L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6100),
                            Id = 4L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6101),
                            LongText = "Deutschland",
                            ShortText = "DE",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1004L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6102),
                            Id = 5L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6103),
                            LongText = "Niederlande",
                            ShortText = "NL",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1005L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6104),
                            Id = 6L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6105),
                            LongText = "Haushaltsgeräte",
                            ShortText = "DAP",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1006L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6106),
                            Id = 7L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6107),
                            LongText = "Medizinische Systeme",
                            ShortText = "PMS",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1007L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6108),
                            Id = 8L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6109),
                            LongText = "Europa",
                            ShortText = "EUR",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1008L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6110),
                            Id = 9L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6111),
                            LongText = "Afrika, Naher Osten",
                            ShortText = "AME",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1009L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6113),
                            Id = 10L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6113),
                            LongText = "Terneuzen",
                            ShortText = "Terneuzen",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1010L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6115),
                            Id = 11L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6115),
                            LongText = "2023",
                            ShortText = "2023",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1011L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6117),
                            Id = 12L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6117),
                            LongText = "2024",
                            ShortText = "2024",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1012L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6119),
                            Id = 13L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6119),
                            LongText = "2025",
                            ShortText = "2025",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1013L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6121),
                            Id = 14L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6121),
                            LongText = "Januar",
                            ShortText = "Januar",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1014L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6123),
                            Id = 15L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6123),
                            LongText = "Februar",
                            ShortText = "Februar",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1015L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6124),
                            Id = 16L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6125),
                            LongText = "März",
                            ShortText = "März",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1016L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6126),
                            Id = 17L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6127),
                            LongText = "April",
                            ShortText = "April",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1017L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6128),
                            Id = 18L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6129),
                            LongText = "Mai",
                            ShortText = "Mai",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1018L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6130),
                            Id = 19L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6130),
                            LongText = "Juni",
                            ShortText = "Juni",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1019L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6132),
                            Id = 20L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6132),
                            LongText = "Juli",
                            ShortText = "Juli",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1020L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6134),
                            Id = 21L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6134),
                            LongText = "August",
                            ShortText = "August",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1021L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6135),
                            Id = 22L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6136),
                            LongText = "September",
                            ShortText = "September",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1022L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6137),
                            Id = 23L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6138),
                            LongText = "Oktober",
                            ShortText = "Oktober",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1023L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6139),
                            Id = 24L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6139),
                            LongText = "November",
                            ShortText = "November",
                            State = 1
                        },
                        new
                        {
                            DimensionsId = 1024L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6141),
                            Id = 25L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6141),
                            LongText = "Dezember",
                            ShortText = "Dezember",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.DimensionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_DimensionTypes_LanguageId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_DimensionTypes_OrganizationId");

                    b.HasIndex(new[] { "Id" }, "idx_dimensiotypess_id");

                    b.ToTable("DimensionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "yyyy",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5795),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5798),
                            LongText = "Year",
                            OrganizationId = 1L,
                            ShortText = "Year",
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            Code = "m",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5804),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5804),
                            LongText = "Month",
                            OrganizationId = 1L,
                            ShortText = "Month",
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            Code = "q",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5806),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5807),
                            LongText = "Quarter",
                            OrganizationId = 1L,
                            ShortText = "Quarter",
                            State = 1
                        },
                        new
                        {
                            Id = 4L,
                            Code = "d",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5835),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5836),
                            LongText = "Day",
                            OrganizationId = 1L,
                            ShortText = "Day",
                            State = 1
                        },
                        new
                        {
                            Id = 5L,
                            Code = "vatyp",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5838),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5839),
                            LongText = "Value Type",
                            OrganizationId = 1L,
                            ShortText = "Value Type",
                            State = 1
                        },
                        new
                        {
                            Id = 6L,
                            Code = "cntry",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5841),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5841),
                            LongText = "Country",
                            OrganizationId = 1L,
                            ShortText = "Country",
                            State = 1
                        },
                        new
                        {
                            Id = 7L,
                            Code = "city",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5843),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5844),
                            LongText = "City",
                            OrganizationId = 1L,
                            ShortText = "City",
                            State = 1
                        },
                        new
                        {
                            Id = 8L,
                            Code = "rgn",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5847),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5847),
                            LongText = "Region",
                            OrganizationId = 1L,
                            ShortText = "Region",
                            State = 1
                        },
                        new
                        {
                            Id = 9L,
                            Code = "sdg",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5849),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5850),
                            LongText = "Sustainable Development",
                            OrganizationId = 1L,
                            ShortText = "SDG",
                            State = 1
                        },
                        new
                        {
                            Id = 10L,
                            Code = "liro",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5851),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5852),
                            LongText = "Line Of Reporting",
                            OrganizationId = 1L,
                            ShortText = "Line Of Reporting",
                            State = 1
                        },
                        new
                        {
                            Id = 11L,
                            Code = "domn",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5854),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5855),
                            LongText = "Domain",
                            OrganizationId = 1L,
                            ShortText = "Domain",
                            State = 1
                        },
                        new
                        {
                            Id = 12L,
                            Code = "bsnss",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5856),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5857),
                            LongText = "Business",
                            OrganizationId = 1L,
                            ShortText = "Business",
                            State = 1
                        },
                        new
                        {
                            Id = 13L,
                            Code = "mrkt",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5859),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5859),
                            LongText = "Market",
                            OrganizationId = 1L,
                            ShortText = "Market",
                            State = 1
                        },
                        new
                        {
                            Id = 14L,
                            Code = "factory",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5861),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5862),
                            LongText = "Factory",
                            OrganizationId = 1L,
                            ShortText = "Factory",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.DimensionTypeTranslation", b =>
                {
                    b.Property<long>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("DimensionTypeId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_DimensionTypeTranslations_LanguageId");

                    b.ToTable("DimensionTypeTranslations");

                    b.HasData(
                        new
                        {
                            DimensionTypeId = 1L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5891),
                            Id = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5892),
                            LongText = "Jaar",
                            ShortText = "Jaar",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 2L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5894),
                            Id = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5895),
                            LongText = "Maand",
                            ShortText = "Maand",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 3L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5896),
                            Id = 3L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5897),
                            LongText = "Kwartaal",
                            ShortText = "Kwartaal",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 4L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5898),
                            Id = 4L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5899),
                            LongText = "Dag",
                            ShortText = "Dag",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 5L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5901),
                            Id = 5L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5901),
                            LongText = "Waardetype",
                            ShortText = "Waardetype",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 6L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5902),
                            Id = 6L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5903),
                            LongText = "Land",
                            ShortText = "Land",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 7L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5904),
                            Id = 7L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5905),
                            LongText = "Stad",
                            ShortText = "Stad",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 8L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5906),
                            Id = 8L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5907),
                            LongText = "Regio",
                            ShortText = "Regio",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 9L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5908),
                            Id = 9L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5909),
                            LongText = "Duurzame Ontwikkeling",
                            ShortText = "SDG",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 10L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5910),
                            Id = 10L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5911),
                            LongText = "Rapporteringslijn",
                            ShortText = "Rapporteringslijn",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 11L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5912),
                            Id = 11L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5913),
                            LongText = "Domein",
                            ShortText = "Domein",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 12L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5914),
                            Id = 12L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5915),
                            LongText = "Bedrijf",
                            ShortText = "Bedrijf",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 13L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5916),
                            Id = 13L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5917),
                            LongText = "Markt",
                            ShortText = "Markt",
                            State = 1
                        },
                        new
                        {
                            DimensionTypeId = 14L,
                            LanguageId = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5918),
                            Id = 14L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(5919),
                            LongText = "Fabriek",
                            ShortText = "Fabriek",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.DisclosureRequirement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("StandardId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_DisclosureRequirement_LanguageId");

                    b.HasIndex(new[] { "StandardId" }, "IX_DisclosureRequirement_StandardId");

                    b.HasIndex(new[] { "Id" }, "idx_disclosurerequirement_id");

                    b.ToTable("DisclosureRequirement", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "BP-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6183),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6184),
                            LongText = "BP-1 - General basis for preparation of sustainability statements",
                            ShortText = "BP-1 - General basis for preparation of sustainability statements",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            Code = "BP-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6186),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6186),
                            LongText = "BP-2 - Disclosures in relation to specific circumstances",
                            ShortText = "BP-2 - Disclosures in relation to specific circumstances",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            Code = "GOV-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6188),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6189),
                            LongText = "GOV-1 - The role of the administrative, management and supervisory bodies",
                            ShortText = "GOV-1 - The role of the administrative, management and supervisory bodies",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 4L,
                            Code = "GOV-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6191),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6191),
                            LongText = "GOV-2 - Information provided to and sustainability matters addressed by the undertaking’s administrative, management and supervisory bodies",
                            ShortText = "GOV-2 - Information provided to and sustainability matters addressed by the undertaking’s administrative, management and supervisory bodies",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 5L,
                            Code = "GOV-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6193),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6193),
                            LongText = "GOV-3 - Integration of sustainability-related performance in incentive schemes",
                            ShortText = "GOV-3 - Integration of sustainability-related performance in incentive schemes",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 6L,
                            Code = "GOV-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6217),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6218),
                            LongText = "GOV-4 - Statement on due diligence",
                            ShortText = "GOV-4 - Statement on due diligence",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 7L,
                            Code = "GOV-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6220),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6220),
                            LongText = "GOV-5 - Risk management and internal controls over sustainability reporting",
                            ShortText = "GOV-5 - Risk management and internal controls over sustainability reporting",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 8L,
                            Code = "SBM-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6222),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6223),
                            LongText = "SBM-1 - Strategy, business model and value chain",
                            ShortText = "SBM-1 - Strategy, business model and value chain",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 9L,
                            Code = "SBM-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6224),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6225),
                            LongText = "SBM-2 - Interests and views of stakeholders",
                            ShortText = "SBM-2 - Interests and views of stakeholders",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 10L,
                            Code = "SBM-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6227),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6227),
                            LongText = "SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            ShortText = "SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 11L,
                            Code = "IRO-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6229),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6231),
                            LongText = "IRO-1 - Description of the process to identify and assess material impacts, risks and opportunities",
                            ShortText = "IRO-1 - Description of the process to identify and assess material impacts, risks and opportunities",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 12L,
                            Code = "IRO-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6232),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6233),
                            LongText = "IRO-2 - Disclosure requirements in ESRS covered by the undertaking’s sustainability statement",
                            ShortText = "IRO-2 - Disclosure requirements in ESRS covered by the undertaking’s sustainability statement",
                            StandardId = 1L,
                            State = 1
                        },
                        new
                        {
                            Id = 13L,
                            Code = "MDR-P",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6234),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6235),
                            LongText = "MDR-P - Policies adopted to manage material sustainability matters",
                            ShortText = "MDR-P - Policies adopted to manage material sustainability matters",
                            StandardId = 2L,
                            State = 1
                        },
                        new
                        {
                            Id = 14L,
                            Code = "MDR-A",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6237),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6237),
                            LongText = "MDR-A - Actions and resources in relation to material sustainability matters",
                            ShortText = "MDR-A - Actions and resources in relation to material sustainability matters",
                            StandardId = 2L,
                            State = 1
                        },
                        new
                        {
                            Id = 15L,
                            Code = "MDR-M",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6239),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6240),
                            LongText = "MDR-M - Metrics in relation to material sustainability matters",
                            ShortText = "MDR-M - Metrics in relation to material sustainability matters",
                            StandardId = 2L,
                            State = 1
                        },
                        new
                        {
                            Id = 16L,
                            Code = "MDR-T",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6241),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6242),
                            LongText = "MDR-T - Tracking effectiveness of policies and actions through targets",
                            ShortText = "MDR-T - Tracking effectiveness of policies and actions through targets",
                            StandardId = 2L,
                            State = 1
                        },
                        new
                        {
                            Id = 17L,
                            Code = "E1.GOV-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6244),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6244),
                            LongText = "E1.GOV-3 - Integration of sustainability-related performance in incentive schemes",
                            ShortText = "E1.GOV-3 - Integration of sustainability-related performance in incentive schemes",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 18L,
                            Code = "E1-1 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6246),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6246),
                            LongText = "E1-1  - Transition plan for climate change mitigation",
                            ShortText = "E1-1  - Transition plan for climate change mitigation",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 19L,
                            Code = "E1.SBM-3 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6248),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6249),
                            LongText = "E1.SBM-3  - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            ShortText = "E1.SBM-3  - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 20L,
                            Code = "E1.IRO-1 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6250),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6251),
                            LongText = "E1.IRO-1  - Description of the processes to identify and assess material climate-related impacts, risks and opportunities",
                            ShortText = "E1.IRO-1  - Description of the processes to identify and assess material climate-related impacts, risks and opportunities",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 21L,
                            Code = "E1-2 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6252),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6253),
                            LongText = "E1-2  - Policies related to climate change mitigation and adaptation",
                            ShortText = "E1-2  - Policies related to climate change mitigation and adaptation",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 22L,
                            Code = "E1-3 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6254),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6255),
                            LongText = "E1-3  - Actions and resources in relation to climate change policies",
                            ShortText = "E1-3  - Actions and resources in relation to climate change policies",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 23L,
                            Code = "E1-4 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6256),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6257),
                            LongText = "E1-4  - Targets related to climate change mitigation and adaptation",
                            ShortText = "E1-4  - Targets related to climate change mitigation and adaptation",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 24L,
                            Code = "E1-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6259),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6259),
                            LongText = "E1-5 - Energy consumption and mix",
                            ShortText = "E1-5 - Energy consumption and mix",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 25L,
                            Code = "E1-6",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6261),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6261),
                            LongText = "E1-6 - Gross Scopes 1, 2, 3 and Total GHG emissions",
                            ShortText = "E1-6 - Gross Scopes 1, 2, 3 and Total GHG emissions",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 26L,
                            Code = "E1-7 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6263),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6264),
                            LongText = "E1-7  - GHG removals and GHG mitigation projects financed through carbon credits",
                            ShortText = "E1-7  - GHG removals and GHG mitigation projects financed through carbon credits",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 27L,
                            Code = "E1-8 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6265),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6266),
                            LongText = "E1-8  - Internal carbon pricing",
                            ShortText = "E1-8  - Internal carbon pricing",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 28L,
                            Code = "E1-9 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6267),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6268),
                            LongText = "E1-9  - Anticipated financial effects from material physical and transition risks and potential climate-related opportunities",
                            ShortText = "E1-9  - Anticipated financial effects from material physical and transition risks and potential climate-related opportunities",
                            StandardId = 3L,
                            State = 1
                        },
                        new
                        {
                            Id = 29L,
                            Code = "E2.IRO-1 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6269),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6270),
                            LongText = "E2.IRO-1  - Description of the processes to identify and assess material pollution-related impacts, risks and opportunities",
                            ShortText = "E2.IRO-1  - Description of the processes to identify and assess material pollution-related impacts, risks and opportunities",
                            StandardId = 4L,
                            State = 1
                        },
                        new
                        {
                            Id = 30L,
                            Code = "E2-1 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6271),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6272),
                            LongText = "E2-1  - Policies related to pollution",
                            ShortText = "E2-1  - Policies related to pollution",
                            StandardId = 4L,
                            State = 1
                        },
                        new
                        {
                            Id = 31L,
                            Code = "E2-2 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6274),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6274),
                            LongText = "E2-2  - Actions and resources related to pollution",
                            ShortText = "E2-2  - Actions and resources related to pollution",
                            StandardId = 4L,
                            State = 1
                        },
                        new
                        {
                            Id = 32L,
                            Code = "E2-3 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6276),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6276),
                            LongText = "E2-3  - Targets related to pollution",
                            ShortText = "E2-3  - Targets related to pollution",
                            StandardId = 4L,
                            State = 1
                        },
                        new
                        {
                            Id = 33L,
                            Code = "E2-4 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6278),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6278),
                            LongText = "E2-4  - Pollution of air, water and soil",
                            ShortText = "E2-4  - Pollution of air, water and soil",
                            StandardId = 4L,
                            State = 1
                        },
                        new
                        {
                            Id = 34L,
                            Code = "E2-5 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6280),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6280),
                            LongText = "E2-5  - Substances of concern and substances of very high concern",
                            ShortText = "E2-5  - Substances of concern and substances of very high concern",
                            StandardId = 4L,
                            State = 1
                        },
                        new
                        {
                            Id = 35L,
                            Code = "E2-6 ",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6282),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6282),
                            LongText = "E2-6  - Anticipated financial effects from pollution-related impacts, risks and opportunities",
                            ShortText = "E2-6  - Anticipated financial effects from pollution-related impacts, risks and opportunities",
                            StandardId = 4L,
                            State = 1
                        },
                        new
                        {
                            Id = 36L,
                            Code = "E3.IRO-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6284),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6285),
                            LongText = "E3.IRO-1 - Description of the processes to identify and assess material water and marine resources-related impacts, risks and opportunities",
                            ShortText = "E3.IRO-1 - Description of the processes to identify and assess material water and marine resources-related impacts, risks and opportunities",
                            StandardId = 5L,
                            State = 1
                        },
                        new
                        {
                            Id = 37L,
                            Code = "E3-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6286),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6287),
                            LongText = "E3-1 - Policies related to water and marine resources",
                            ShortText = "E3-1 - Policies related to water and marine resources",
                            StandardId = 5L,
                            State = 1
                        },
                        new
                        {
                            Id = 38L,
                            Code = "E3-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6288),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6289),
                            LongText = "E3-2 - Actions and resources related to water and marine resources",
                            ShortText = "E3-2 - Actions and resources related to water and marine resources",
                            StandardId = 5L,
                            State = 1
                        },
                        new
                        {
                            Id = 39L,
                            Code = "E3-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6290),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6291),
                            LongText = "E3-3 - Targets related to water and marine resources",
                            ShortText = "E3-3 - Targets related to water and marine resources",
                            StandardId = 5L,
                            State = 1
                        },
                        new
                        {
                            Id = 40L,
                            Code = "E3-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6292),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6293),
                            LongText = "E3-4 - Water consumption",
                            ShortText = "E3-4 - Water consumption",
                            StandardId = 5L,
                            State = 1
                        },
                        new
                        {
                            Id = 41L,
                            Code = "E3-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6294),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6295),
                            LongText = "E3-5 - Anticipated financial effects from water and marine resources-related impacts, risks and opportunities",
                            ShortText = "E3-5 - Anticipated financial effects from water and marine resources-related impacts, risks and opportunities",
                            StandardId = 5L,
                            State = 1
                        },
                        new
                        {
                            Id = 42L,
                            Code = "E4.SBM-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6296),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6297),
                            LongText = "E4.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            ShortText = "E4.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            StandardId = 6L,
                            State = 1
                        },
                        new
                        {
                            Id = 43L,
                            Code = "E4.IRO-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6298),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6299),
                            LongText = "E4.IRO-1 - Description of processes to identify and assess material biodiversity and ecosystem-related impacts, risks and opportunities",
                            ShortText = "E4.IRO-1 - Description of processes to identify and assess material biodiversity and ecosystem-related impacts, risks and opportunities",
                            StandardId = 6L,
                            State = 1
                        },
                        new
                        {
                            Id = 44L,
                            Code = "E4-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6300),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6301),
                            LongText = "E4-1 - Transition plan and consideration of biodiversity and ecosystems in strategy and business model",
                            ShortText = "E4-1 - Transition plan and consideration of biodiversity and ecosystems in strategy and business model",
                            StandardId = 6L,
                            State = 1
                        },
                        new
                        {
                            Id = 45L,
                            Code = "E4-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6302),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6303),
                            LongText = "E4-2 - Policies related to biodiversity and ecosystems",
                            ShortText = "E4-2 - Policies related to biodiversity and ecosystems",
                            StandardId = 6L,
                            State = 1
                        },
                        new
                        {
                            Id = 46L,
                            Code = "E4-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6304),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6305),
                            LongText = "E4-3 - Actions and resources related to biodiversity and ecosystems",
                            ShortText = "E4-3 - Actions and resources related to biodiversity and ecosystems",
                            StandardId = 6L,
                            State = 1
                        },
                        new
                        {
                            Id = 47L,
                            Code = "E4-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6306),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6307),
                            LongText = "E4-4 - Targets related to biodiversity and ecosystems",
                            ShortText = "E4-4 - Targets related to biodiversity and ecosystems",
                            StandardId = 6L,
                            State = 1
                        },
                        new
                        {
                            Id = 48L,
                            Code = "E4-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6308),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6309),
                            LongText = "E4-5 - Impact metrics related to biodiversity and ecosystems change",
                            ShortText = "E4-5 - Impact metrics related to biodiversity and ecosystems change",
                            StandardId = 6L,
                            State = 1
                        },
                        new
                        {
                            Id = 49L,
                            Code = "E4-6",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6311),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6312),
                            LongText = "E4-6 - Anticipated financial effects from biodiversity and ecosystem-related risks and opportunities",
                            ShortText = "E4-6 - Anticipated financial effects from biodiversity and ecosystem-related risks and opportunities",
                            StandardId = 6L,
                            State = 1
                        },
                        new
                        {
                            Id = 50L,
                            Code = "E5.IRO-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6327),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6328),
                            LongText = "E5.IRO-1 - Description of the processes to identify and assess material resource use and circular economy-related impacts, risks and opportunities",
                            ShortText = "E5.IRO-1 - Description of the processes to identify and assess material resource use and circular economy-related impacts, risks and opportunities",
                            StandardId = 7L,
                            State = 1
                        },
                        new
                        {
                            Id = 51L,
                            Code = "E5-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6329),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6330),
                            LongText = "E5-1 - Policies related to resource use and circular economy",
                            ShortText = "E5-1 - Policies related to resource use and circular economy",
                            StandardId = 7L,
                            State = 1
                        },
                        new
                        {
                            Id = 52L,
                            Code = "E5-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6332),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6332),
                            LongText = "E5-2 - Actions and resources related to resource use and circular economy",
                            ShortText = "E5-2 - Actions and resources related to resource use and circular economy",
                            StandardId = 7L,
                            State = 1
                        },
                        new
                        {
                            Id = 53L,
                            Code = "E5-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6334),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6334),
                            LongText = "E5-3 - Targets related to resource use and circular economy",
                            ShortText = "E5-3 - Targets related to resource use and circular economy",
                            StandardId = 7L,
                            State = 1
                        },
                        new
                        {
                            Id = 54L,
                            Code = "E5-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6336),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6336),
                            LongText = "E5-4 - Resource inflows",
                            ShortText = "E5-4 - Resource inflows",
                            StandardId = 7L,
                            State = 1
                        },
                        new
                        {
                            Id = 55L,
                            Code = "E5-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6338),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6338),
                            LongText = "E5-5 - Resource outflows",
                            ShortText = "E5-5 - Resource outflows",
                            StandardId = 7L,
                            State = 1
                        },
                        new
                        {
                            Id = 56L,
                            Code = "E5-6",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6340),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6340),
                            LongText = "E5-6 - Anticipated financial effects from resource use and circular economy-related impacts, risks and opportunities",
                            ShortText = "E5-6 - Anticipated financial effects from resource use and circular economy-related impacts, risks and opportunities",
                            StandardId = 7L,
                            State = 1
                        },
                        new
                        {
                            Id = 57L,
                            Code = "S1.SBM-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6343),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6344),
                            LongText = "S1.SBM-2 - Interests and views of stakeholders",
                            ShortText = "S1.SBM-2 - Interests and views of stakeholders",
                            State = 1
                        },
                        new
                        {
                            Id = 58L,
                            Code = "S1.SBM-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6345),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6346),
                            LongText = "S1.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            ShortText = "S1.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 59L,
                            Code = "S1-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6347),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6348),
                            LongText = "S1-1 - Policies related to own workforce",
                            ShortText = "S1-1 - Policies related to own workforce",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 60L,
                            Code = "S1-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6349),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6350),
                            LongText = "S1-2 - Processes for engaging with own workforce and workers’ representatives about impacts",
                            ShortText = "S1-2 - Processes for engaging with own workforce and workers’ representatives about impacts",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 61L,
                            Code = "S1-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6352),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6352),
                            LongText = "S1-3 - Processes to remediate negative impacts and channels for own workforce to raise concerns",
                            ShortText = "S1-3 - Processes to remediate negative impacts and channels for own workforce to raise concerns",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 62L,
                            Code = "S1-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6354),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6354),
                            LongText = "S1-4 - Taking action on material impacts on own workforce, and approaches to managing material risks and pursuing material opportunities related to own workforce, and effectiveness of those actions",
                            ShortText = "S1-4 - Taking action on material impacts on own workforce, and approaches to managing material risks and pursuing material opportunities related to own workforce, and effectiveness of those actions",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 63L,
                            Code = "S1-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6356),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6356),
                            LongText = "S1-5 - Targets related to managing material negative impacts, advancing positive impacts, and managing material risks and opportunities",
                            ShortText = "S1-5 - Targets related to managing material negative impacts, advancing positive impacts, and managing material risks and opportunities",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 64L,
                            Code = "S1-6",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6358),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6358),
                            LongText = "S1-6 - Characteristics of the undertaking’s employees",
                            ShortText = "S1-6 - Characteristics of the undertaking’s employees",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 65L,
                            Code = "S1-7",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6360),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6360),
                            LongText = "S1-7 - Characteristics of non-employees in the undertaking’s own workforce",
                            ShortText = "S1-7 - Characteristics of non-employees in the undertaking’s own workforce",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 66L,
                            Code = "S1-8",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6362),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6362),
                            LongText = "S1-8 - Collective bargaining coverage and social dialogue",
                            ShortText = "S1-8 - Collective bargaining coverage and social dialogue",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 67L,
                            Code = "S1-9",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6364),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6364),
                            LongText = "S1-9 - Diversity metrics",
                            ShortText = "S1-9 - Diversity metrics",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 68L,
                            Code = "S1-10",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6366),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6366),
                            LongText = "S1-10 - Adequate wages",
                            ShortText = "S1-10 - Adequate wages",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 69L,
                            Code = "S1-11",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6368),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6368),
                            LongText = "S1-11 - Social protection",
                            ShortText = "S1-11 - Social protection",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 70L,
                            Code = "S1-12",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6370),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6370),
                            LongText = "S1-12 - Persons with disabilities",
                            ShortText = "S1-12 - Persons with disabilities",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 71L,
                            Code = "S1-13",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6372),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6372),
                            LongText = "S1-13 - Training and skills development metrics",
                            ShortText = "S1-13 - Training and skills development metrics",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 72L,
                            Code = "S1-14",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6374),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6374),
                            LongText = "S1-14 - Health and safety metrics",
                            ShortText = "S1-14 - Health and safety metrics",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 73L,
                            Code = "S1-15",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6376),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6376),
                            LongText = "S1-15 - Work-life balance metrics",
                            ShortText = "S1-15 - Work-life balance metrics",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 74L,
                            Code = "S1-16",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6378),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6378),
                            LongText = "S1-16 - Remuneration metrics (pay gap and total remuneration)",
                            ShortText = "S1-16 - Remuneration metrics (pay gap and total remuneration)",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 75L,
                            Code = "S1-17",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6380),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6380),
                            LongText = "S1-17 - Incidents, complaints and severe human rights impacts",
                            ShortText = "S1-17 - Incidents, complaints and severe human rights impacts",
                            StandardId = 8L,
                            State = 1
                        },
                        new
                        {
                            Id = 76L,
                            Code = "S2.SBM-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6382),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6383),
                            LongText = "S2.SBM-2 - Interests and views of stakeholders",
                            ShortText = "S2.SBM-2 - Interests and views of stakeholders",
                            State = 1
                        },
                        new
                        {
                            Id = 77L,
                            Code = "S2.SBM-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6384),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6385),
                            LongText = "S2.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            ShortText = "S2.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            StandardId = 9L,
                            State = 1
                        },
                        new
                        {
                            Id = 78L,
                            Code = "S2-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6386),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6387),
                            LongText = "S2-1 - Policies related to value chain workers",
                            ShortText = "S2-1 - Policies related to value chain workers",
                            StandardId = 9L,
                            State = 1
                        },
                        new
                        {
                            Id = 79L,
                            Code = "S2-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6388),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6389),
                            LongText = "S2-2 - Processes for engaging with value chain workers about impacts",
                            ShortText = "S2-2 - Processes for engaging with value chain workers about impacts",
                            StandardId = 9L,
                            State = 1
                        },
                        new
                        {
                            Id = 80L,
                            Code = "S2-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6391),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6391),
                            LongText = "S2-3 - Processes to remediate negative impacts and channels for value chain workers to raise concerns",
                            ShortText = "S2-3 - Processes to remediate negative impacts and channels for value chain workers to raise concerns",
                            StandardId = 9L,
                            State = 1
                        },
                        new
                        {
                            Id = 81L,
                            Code = "S2-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6393),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6393),
                            LongText = "S2-4 - Taking Action on material impacts on value chain workers, and approaches to managing material risks and pursuing material opportunities related to value chain workers, and effectiveness of those actions",
                            ShortText = "S2-4 - Taking Action on material impacts on value chain workers, and approaches to managing material risks and pursuing material opportunities related to value chain workers, and effectiveness of those actions",
                            StandardId = 9L,
                            State = 1
                        },
                        new
                        {
                            Id = 82L,
                            Code = "S2-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6395),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6395),
                            LongText = "S2-5 - Targets related to managing material negative impacts, advancing positive impacts, and managing material risks and opportunities",
                            ShortText = "S2-5 - Targets related to managing material negative impacts, advancing positive impacts, and managing material risks and opportunities",
                            StandardId = 9L,
                            State = 1
                        },
                        new
                        {
                            Id = 84L,
                            Code = "S3.SBM-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6397),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6397),
                            LongText = "S3.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            ShortText = "S3.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            StandardId = 10L,
                            State = 1
                        },
                        new
                        {
                            Id = 85L,
                            Code = "S3-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6399),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6399),
                            LongText = "S3-1 - Policies related to affected communities",
                            ShortText = "S3-1 - Policies related to affected communities",
                            StandardId = 10L,
                            State = 1
                        },
                        new
                        {
                            Id = 86L,
                            Code = "S3-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6401),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6401),
                            LongText = "S3-2 - Processes for engaging with affected communities about impacts",
                            ShortText = "S3-2 - Processes for engaging with affected communities about impacts",
                            StandardId = 10L,
                            State = 1
                        },
                        new
                        {
                            Id = 87L,
                            Code = "S3-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6403),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6404),
                            LongText = "S3-3 - Processes to remediate negative impacts and channels for affected communities to raise concerns",
                            ShortText = "S3-3 - Processes to remediate negative impacts and channels for affected communities to raise concerns",
                            StandardId = 10L,
                            State = 1
                        },
                        new
                        {
                            Id = 88L,
                            Code = "S3-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6405),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6406),
                            LongText = "S3-4 - aking action on material impacts on affected communities, and approaches to managing material risks and pursuing material opportunities related to affected communities, and effectiveness of those actions",
                            ShortText = "S3-4 - aking action on material impacts on affected communities, and approaches to managing material risks and pursuing material opportunities related to affected communities, and effectiveness of those actions",
                            StandardId = 10L,
                            State = 1
                        },
                        new
                        {
                            Id = 89L,
                            Code = "S3-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6407),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6408),
                            LongText = "S3-5 - Targets related to managing material negative impacts, advancing positive impacts, and managing material risks and opportunitie",
                            ShortText = "S3-5 - Targets related to managing material negative impacts, advancing positive impacts, and managing material risks and opportunitie",
                            StandardId = 10L,
                            State = 1
                        },
                        new
                        {
                            Id = 90L,
                            Code = "S4.SBM-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6409),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6410),
                            LongText = "S4.SBM-2 - Interests and views of stakeholders",
                            ShortText = "S4.SBM-2 - Interests and views of stakeholders",
                            State = 1
                        },
                        new
                        {
                            Id = 91L,
                            Code = "S4.SBM-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6411),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6412),
                            LongText = "S4.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            ShortText = "S4.SBM-3 - Material impacts, risks and opportunities and their interaction with strategy and business model",
                            StandardId = 11L,
                            State = 1
                        },
                        new
                        {
                            Id = 92L,
                            Code = "S4-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6413),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6414),
                            LongText = "S4-1 - Policies related to consumers and end-users",
                            ShortText = "S4-1 - Policies related to consumers and end-users",
                            StandardId = 11L,
                            State = 1
                        },
                        new
                        {
                            Id = 93L,
                            Code = "S4-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6415),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6416),
                            LongText = "S4-2 - Processes for engaging with consumers and end-users about impacts",
                            ShortText = "S4-2 - Processes for engaging with consumers and end-users about impacts",
                            StandardId = 11L,
                            State = 1
                        },
                        new
                        {
                            Id = 94L,
                            Code = "S4-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6449),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6450),
                            LongText = "S4-3 - Processes to remediate negative impacts and channels for consumers and end-users to raise concerns",
                            ShortText = "S4-3 - Processes to remediate negative impacts and channels for consumers and end-users to raise concerns",
                            StandardId = 11L,
                            State = 1
                        },
                        new
                        {
                            Id = 95L,
                            Code = "S4-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6451),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6452),
                            LongText = "S4-4 - Taking action on material impacts on consumers and end-users, and approaches to managing material risks and pursuing material opportunities related to consumers and end-users, and effectiveness of those actions",
                            ShortText = "S4-4 - Taking action on material impacts on consumers and end-users, and approaches to managing material risks and pursuing material opportunities related to consumers and end-users, and effectiveness of those actions",
                            StandardId = 11L,
                            State = 1
                        },
                        new
                        {
                            Id = 96L,
                            Code = "S4-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6453),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6454),
                            LongText = "S4-5 - Targets related to managing material negative impacts, advancing positive impacts, and managing material risks and opportunities",
                            ShortText = "S4-5 - Targets related to managing material negative impacts, advancing positive impacts, and managing material risks and opportunities",
                            StandardId = 11L,
                            State = 1
                        },
                        new
                        {
                            Id = 97L,
                            Code = "G1.GOV-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6456),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6456),
                            LongText = "G1.GOV-1 - The role of the administrative, supervisory and management bodies",
                            ShortText = "G1.GOV-1 - The role of the administrative, supervisory and management bodies",
                            StandardId = 12L,
                            State = 1
                        },
                        new
                        {
                            Id = 98L,
                            Code = "G1-1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6458),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6458),
                            LongText = "G1-1 - Business conduct policies and corporate culture",
                            ShortText = "G1-1 - Business conduct policies and corporate culture",
                            StandardId = 12L,
                            State = 1
                        },
                        new
                        {
                            Id = 99L,
                            Code = "G1-2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6460),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6461),
                            LongText = "G1-2 - Management of relationships with suppliers",
                            ShortText = "G1-2 - Management of relationships with suppliers",
                            StandardId = 12L,
                            State = 1
                        },
                        new
                        {
                            Id = 100L,
                            Code = "G1-3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6462),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6463),
                            LongText = "G1-3 - Prevention and detection of corruption and bribery",
                            ShortText = "G1-3 - Prevention and detection of corruption and bribery",
                            StandardId = 12L,
                            State = 1
                        },
                        new
                        {
                            Id = 101L,
                            Code = "G1-4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6464),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6465),
                            LongText = "G1-4 - Incidents of corruption or bribery",
                            ShortText = "G1-4 - Incidents of corruption or bribery",
                            StandardId = 12L,
                            State = 1
                        },
                        new
                        {
                            Id = 102L,
                            Code = "G1-5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6466),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6467),
                            LongText = "G1-5 - Political influence and lobbying activities",
                            ShortText = "G1-5 - Political influence and lobbying activities",
                            StandardId = 12L,
                            State = 1
                        },
                        new
                        {
                            Id = 103L,
                            Code = "G1-6",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6469),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6469),
                            LongText = "G1-6 - Payment practices",
                            ShortText = "G1-6 - Payment practices",
                            StandardId = 12L,
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.Hierarchy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DataPointValuesId")
                        .HasColumnType("bigint");

                    b.Property<long>("HierarchyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DataPointValuesId" }, "IX_Hierarchy_DataPointValuesId");

                    b.HasIndex(new[] { "HierarchyId" }, "idx_hierarchy_id");

                    b.ToTable("Hierarchy", (string)null);
                });

            modelBuilder.Entity("ESG.Domain.Models.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Languages_OrganizationId");

                    b.HasIndex(new[] { "Id" }, "idx_languages_id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsoCode = "en",
                            Name = "English"
                        },
                        new
                        {
                            Id = 2L,
                            IsoCode = "nl",
                            Name = "Duch"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ColumnId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RowId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("ViewType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ColumnId" }, "IX_ModelConfiguration_ColumnId");

                    b.HasIndex(new[] { "DataModelId" }, "IX_ModelConfiguration_DataModelId");

                    b.HasIndex(new[] { "RowId" }, "IX_ModelConfiguration_RowId");

                    b.HasIndex(new[] { "Id" }, "idx_modelconfiguration_id");

                    b.HasIndex(new[] { "DataModelId", "ViewType" }, "idx_modelid_viewtype");

                    b.ToTable("ModelConfiguration", (string)null);
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelDatapoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("DatapointValuesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DataModelId" }, "IX_ModelDatapoints_DataModelId");

                    b.HasIndex(new[] { "DatapointValuesId" }, "IX_ModelDatapoints_DatapointValuesId");

                    b.HasIndex(new[] { "Id" }, "idx_modeldatapoints_id");

                    b.ToTable("ModelDatapoints");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelDimensionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DataModelId" }, "IX_ModelDimensionTypes_DataModelId");

                    b.HasIndex(new[] { "DimensionTypeId" }, "fki_FK_ModelDimensionTypes_DimensionType_DimensionTypeId");

                    b.HasIndex(new[] { "Id" }, "idx_modeldimensiontypes_id");

                    b.ToTable("ModelDimensionTypes");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelDimensionValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DimensionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ModelDimensionTypesId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DimensionsId" }, "IX_ModelDimensionValues_DimensionsId");

                    b.HasIndex(new[] { "ModelDimensionTypesId" }, "IX_ModelDimensionValues_ModelDimensionTypesId");

                    b.HasIndex(new[] { "Id" }, "idx_modeldimensionvalues_id");

                    b.ToTable("ModelDimensionValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelFilterCombination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int?>("ViewType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DataModelId" }, "fki_FK_DataModel_DataModelId");

                    b.HasIndex(new[] { "Id" }, "idx_modelfiltercombinations_id");

                    b.ToTable("ModelFilterCombinations");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelFilterCombinationalValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataModelFiltersId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DimensionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("DimensionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ModelFilterCombinationsId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DimensionsId" }, "IX_ModelFilterCombinationalValues_DimensionsId");

                    b.HasIndex(new[] { "DataModelFiltersId" }, "idx_datamodelfilters_datamodelfiltersid");

                    b.HasIndex(new[] { "DimensionTypeId" }, "idx_dimensontype_dimesiontypeid");

                    b.HasIndex(new[] { "ModelFilterCombinationsId" }, "idx_modelfiltercombination_modelfiltercombinationsid");

                    b.HasIndex(new[] { "Id" }, "idx_modelfiltercombinationalvalues_id");

                    b.ToTable("ModelFilterCombinationalValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatsName")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_Organizations_TenantId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = "USA",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@org1.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LatsName = "Doe",
                            Name = "ESG Global",
                            PostalCode = "12345",
                            RegistrationId = "REG-001",
                            State = 0,
                            StreetAddress = "123 Main St",
                            StreetNumber = "456",
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Country = "Canada",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@org2.com",
                            FirstName = "Jane",
                            LanguageId = 1L,
                            LatsName = "Smith",
                            Name = "Green Future",
                            PostalCode = "67890",
                            RegistrationId = "REG-002",
                            State = 0,
                            StreetAddress = "456 Oak St",
                            StreetNumber = "789",
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Country = "UK",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.johnson@org3.com",
                            FirstName = "Alice",
                            LanguageId = 1L,
                            LatsName = "Johnson",
                            Name = "EcoTech",
                            PostalCode = "11223",
                            RegistrationId = "REG-003",
                            State = 0,
                            StreetAddress = "789 Pine St",
                            StreetNumber = "101",
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Country = "Germany",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.brown@org4.com",
                            FirstName = "Bob",
                            LanguageId = 1L,
                            LatsName = "Brown",
                            Name = "Sustainable Solutions",
                            PostalCode = "33445",
                            RegistrationId = "REG-004",
                            State = 0,
                            StreetAddress = "101 Elm St",
                            StreetNumber = "202",
                            TenantId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            Country = "Australia",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charlie.davis@org5.com",
                            FirstName = "Charlie",
                            LanguageId = 1L,
                            LatsName = "Davis",
                            Name = "CarbonFree",
                            PostalCode = "55667",
                            RegistrationId = "REG-005",
                            State = 0,
                            StreetAddress = "202 Birch St",
                            StreetNumber = "303",
                            TenantId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            Country = "India",
                            CreatedBy = 0L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.evans@org6.com",
                            FirstName = "David",
                            LanguageId = 1L,
                            LatsName = "Evans",
                            Name = "CleanEnergy",
                            PostalCode = "77889",
                            RegistrationId = "REG-006",
                            State = 0,
                            StreetAddress = "303 Cedar St",
                            StreetNumber = "404",
                            TenantId = 2L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.OrganizationHeirarchy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HierarchyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_OrganizationHeirarchies_OrganizationId")
                        .IsUnique();

                    b.ToTable("OrganizationHeirarchies");
                });

            modelBuilder.Entity("ESG.Domain.Models.OrganizationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_OrganizationUsers_OrganizationId");

                    b.HasIndex(new[] { "UserId" }, "IX_OrganizationUsers_UserId");

                    b.ToTable("OrganizationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6633),
                            OrganizationId = 1L,
                            State = 0,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6634),
                            OrganizationId = 1L,
                            State = 0,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6636),
                            OrganizationId = 1L,
                            State = 0,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 19L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6637),
                            OrganizationId = 1L,
                            State = 0,
                            UserId = 101L
                        },
                        new
                        {
                            Id = 20L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6638),
                            OrganizationId = 1L,
                            State = 0,
                            UserId = 102L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6638),
                            OrganizationId = 2L,
                            State = 0,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6639),
                            OrganizationId = 2L,
                            State = 0,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6640),
                            OrganizationId = 2L,
                            State = 0,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6641),
                            OrganizationId = 3L,
                            State = 0,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6642),
                            OrganizationId = 3L,
                            State = 0,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6643),
                            OrganizationId = 3L,
                            State = 0,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6644),
                            OrganizationId = 4L,
                            State = 0,
                            UserId = 10L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6645),
                            OrganizationId = 4L,
                            State = 0,
                            UserId = 11L
                        },
                        new
                        {
                            Id = 12L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6646),
                            OrganizationId = 4L,
                            State = 0,
                            UserId = 12L
                        },
                        new
                        {
                            Id = 13L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6647),
                            OrganizationId = 5L,
                            State = 0,
                            UserId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6648),
                            OrganizationId = 5L,
                            State = 0,
                            UserId = 14L
                        },
                        new
                        {
                            Id = 15L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6648),
                            OrganizationId = 5L,
                            State = 0,
                            UserId = 15L
                        },
                        new
                        {
                            Id = 16L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6649),
                            OrganizationId = 6L,
                            State = 0,
                            UserId = 16L
                        },
                        new
                        {
                            Id = 17L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6650),
                            OrganizationId = 6L,
                            State = 0,
                            UserId = 17L
                        },
                        new
                        {
                            Id = 18L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6651),
                            OrganizationId = 6L,
                            State = 0,
                            UserId = 18L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "AdminEE"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "ClientAdmin"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.SampleModelFilterCombinationValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DataModelFiltersId")
                        .HasColumnType("bigint");

                    b.Property<long>("DimensionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ModelFilterCombinationsId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DimensionsId" }, "IX_SampleModelFilterCombinationValues_DimensionsId");

                    b.HasIndex(new[] { "DataModelFiltersId" }, "fki_FK_DataModelFilters_DatamodelFiltersId");

                    b.HasIndex(new[] { "ModelFilterCombinationsId" }, "fki_FK_ModelFlterCombinations_ModelFIlterCombinationsId");

                    b.HasIndex(new[] { "Id" }, "idx_sampledatamodelfiltercombinationalvalue_sid");

                    b.ToTable("SampleModelFilterCombinationValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.Standard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_Standard_LanguageId");

                    b.HasIndex(new[] { "TopicId" }, "IX_Standard_TopicId");

                    b.HasIndex(new[] { "Id" }, "idx_standard_id");

                    b.ToTable("Standard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "ESRS2_GP",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6704),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6704),
                            LongText = "ESRS2_GP - General principles",
                            ShortText = "ESRS2_GP - General principles",
                            State = 1,
                            TopicId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Code = "ESRS2_MDR",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6707),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6708),
                            LongText = "ESRS2_MDR - General disclosures",
                            ShortText = "ESRS2_MDR - General disclosures",
                            State = 1,
                            TopicId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Code = "E1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6709),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6710),
                            LongText = "E1 - Climate change",
                            ShortText = "E1 - Climate change",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Code = "E2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6712),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6712),
                            LongText = "E2 - Pollution",
                            ShortText = "E2 - Pollution",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            Code = "E3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6714),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6714),
                            LongText = "E3 - Water and marine resources",
                            ShortText = "E3 - Water and marine resources",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            Code = "E4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6716),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6717),
                            LongText = "E4 - Biodiversity and ecosystems",
                            ShortText = "E4 - Biodiversity and ecosystems",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            Code = "E5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6718),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6719),
                            LongText = "E5 - Resource use and circular economy",
                            ShortText = "E5 - Resource use and circular economy",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            Code = "S1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6720),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6721),
                            LongText = "S1 - Own workforce",
                            ShortText = "S1 - Own workforce",
                            State = 1,
                            TopicId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            Code = "S2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6722),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6723),
                            LongText = "S2 - Workers in the value chain",
                            ShortText = "S2 - Workers in the value chain",
                            State = 1,
                            TopicId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            Code = "S3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6724),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6725),
                            LongText = "S3 - Affected communities",
                            ShortText = "S3 - Affected communities",
                            State = 1,
                            TopicId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Code = "S4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6726),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6727),
                            LongText = "S4 - Consumers and end-users",
                            ShortText = "S4 - Consumers and end-users",
                            State = 1,
                            TopicId = 3L
                        },
                        new
                        {
                            Id = 12L,
                            Code = "G1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6728),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6729),
                            LongText = "G1 - Governance, risk, and internal control",
                            ShortText = "G1 - Governance, risk, and internal control",
                            State = 1,
                            TopicId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Code = "ESRS2_GP",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6730),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6731),
                            LongText = "ESRS2_GP - Principes généraux",
                            ShortText = "ESRS2_GP - Principes généraux",
                            State = 1,
                            TopicId = 1L
                        },
                        new
                        {
                            Id = 14L,
                            Code = "ESRS2_MDR",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6732),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6733),
                            LongText = "ESRS2_MDR - Informations générales",
                            ShortText = "ESRS2_MDR - Informations générales",
                            State = 1,
                            TopicId = 1L
                        },
                        new
                        {
                            Id = 15L,
                            Code = "E1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6770),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6771),
                            LongText = "E1 - Changement climatique",
                            ShortText = "E1 - Changement climatique",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 16L,
                            Code = "E2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6773),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6773),
                            LongText = "E2 - Pollution",
                            ShortText = "E2 - Pollution",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 17L,
                            Code = "E3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6775),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6775),
                            LongText = "E3 - Ressources marines et aquatiques",
                            ShortText = "E3 - Ressources marines et aquatiques",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 18L,
                            Code = "E4",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6777),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6777),
                            LongText = "E4 - Biodiversité et écosystèmes",
                            ShortText = "E4 - Biodiversité et écosystèmes",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 19L,
                            Code = "E5",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6779),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6779),
                            LongText = "E5 - Utilisation des ressources et économie circulaire",
                            ShortText = "E5 - Utilisation des ressources et économie circulaire",
                            State = 1,
                            TopicId = 2L
                        },
                        new
                        {
                            Id = 20L,
                            Code = "S1",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6781),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6781),
                            LongText = "S1 - Main-d'œuvre propre",
                            ShortText = "S1 - Main-d'œuvre propre",
                            State = 1,
                            TopicId = 3L
                        },
                        new
                        {
                            Id = 21L,
                            Code = "S2",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6783),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6783),
                            LongText = "S2 - Travailleurs de la chaîne de valeur",
                            ShortText = "S2 - Travailleurs de la chaîne de valeur",
                            State = 1,
                            TopicId = 3L
                        },
                        new
                        {
                            Id = 22L,
                            Code = "S3",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6785),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6785),
                            LongText = "S3 - Communautés affectées",
                            ShortText = "S3 - Communautés affectées",
                            State = 1,
                            TopicId = 3L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "idx_tenant_id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "ESG Global1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "ESG Global2"
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_Topic_LanguageId");

                    b.HasIndex(new[] { "Id" }, "idx_topic_id");

                    b.ToTable("Topic", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "general",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6834),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6835),
                            LongText = "General",
                            ShortText = "General",
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            Code = "environment",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6837),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6838),
                            LongText = "E-Environment",
                            ShortText = "E-Environment",
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            Code = "social",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6839),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6840),
                            LongText = "S-Social",
                            ShortText = "S-Social",
                            State = 1
                        },
                        new
                        {
                            Id = 4L,
                            Code = "governance",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6842),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6842),
                            LongText = "G-Governance",
                            ShortText = "G-Governance",
                            State = 1
                        },
                        new
                        {
                            Id = 17L,
                            Code = "general",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6844),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6844),
                            LongText = "Algemeen",
                            ShortText = "Algemeen",
                            State = 1
                        },
                        new
                        {
                            Id = 18L,
                            Code = "environment",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6846),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6846),
                            LongText = "M-Milieu",
                            ShortText = "M-Milieu",
                            State = 1
                        },
                        new
                        {
                            Id = 19L,
                            Code = "social",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6848),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6848),
                            LongText = "S-Sociaal",
                            ShortText = "S-Sociaal",
                            State = 1
                        },
                        new
                        {
                            Id = 20L,
                            Code = "governance",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6849),
                            LanguageId = 2L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6850),
                            LongText = "B-Bestuur",
                            ShortText = "B-Bestuur",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_UnitOfMeasures_LanguageId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_UnitOfMeasures_OrganizationId");

                    b.HasIndex(new[] { "UnitOfMeasureTypeId" }, "IX_UnitOfMeasures_UnitOfMeasureTypeId");

                    b.HasIndex(new[] { "Id" }, "idx_unitofmeasure_id");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasureTranslation", b =>
                {
                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_UnitOfMeasureTranslations_LanguageId");

                    b.ToTable("UnitOfMeasureTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_UnitOfMeasureTypes_LanguageId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_UnitOfMeasureTypes_OrganizationId");

                    b.HasIndex(new[] { "Id" }, "idx_unitofmeasuretype_id");

                    b.ToTable("UnitOfMeasureTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "acidbasecapacity",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6874),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6875),
                            LongText = "Acid/Base capacity",
                            OrganizationId = 1L,
                            ShortText = "Acid/Base capacity",
                            State = 1
                        },
                        new
                        {
                            Id = 2L,
                            Code = "area",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6877),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6878),
                            LongText = "Area",
                            OrganizationId = 1L,
                            ShortText = "Area",
                            State = 1
                        },
                        new
                        {
                            Id = 3L,
                            Code = "density",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6880),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6880),
                            LongText = "Density",
                            OrganizationId = 1L,
                            ShortText = "Density",
                            State = 1
                        },
                        new
                        {
                            Id = 4L,
                            Code = "energy",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6882),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6882),
                            LongText = "Energy",
                            OrganizationId = 1L,
                            ShortText = "Energy",
                            State = 1
                        },
                        new
                        {
                            Id = 5L,
                            Code = "force",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6884),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6885),
                            LongText = "Force",
                            OrganizationId = 1L,
                            ShortText = "Force",
                            State = 1
                        },
                        new
                        {
                            Id = 6L,
                            Code = "frequency",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6887),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6887),
                            LongText = "Frequency",
                            OrganizationId = 1L,
                            ShortText = "Frequency",
                            State = 1
                        },
                        new
                        {
                            Id = 7L,
                            Code = "heat_conductivity",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6889),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6889),
                            LongText = "Heat Conductivity",
                            OrganizationId = 1L,
                            ShortText = "Heat Conductivity",
                            State = 1
                        },
                        new
                        {
                            Id = 8L,
                            Code = "hydrolysis_rate",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6891),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6891),
                            LongText = "Hydrolysis rate",
                            OrganizationId = 1L,
                            ShortText = "Hydrolysis rate",
                            State = 1
                        },
                        new
                        {
                            Id = 9L,
                            Code = "inverse_area",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6893),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6893),
                            LongText = "Inverse area",
                            OrganizationId = 1L,
                            ShortText = "Inverse area",
                            State = 1
                        },
                        new
                        {
                            Id = 10L,
                            Code = "kinematic_viscosity",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6895),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6895),
                            LongText = "Kinematic viscosity",
                            OrganizationId = 1L,
                            ShortText = "Kinematic viscosity",
                            State = 1
                        },
                        new
                        {
                            Id = 11L,
                            Code = "length",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6897),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6897),
                            LongText = "Length",
                            OrganizationId = 1L,
                            ShortText = "Length",
                            State = 1
                        },
                        new
                        {
                            Id = 12L,
                            Code = "luminous_intensity",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6899),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6899),
                            LongText = "Luminous intensity",
                            OrganizationId = 1L,
                            ShortText = "Luminous intensity",
                            State = 1
                        },
                        new
                        {
                            Id = 13L,
                            Code = "magnet_field_dens",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6901),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6901),
                            LongText = "Magnet. field dens.",
                            OrganizationId = 1L,
                            ShortText = "Magnet. field dens.",
                            State = 1
                        },
                        new
                        {
                            Id = 14L,
                            Code = "mass",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6903),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6903),
                            LongText = "Mass",
                            OrganizationId = 1L,
                            ShortText = "Mass",
                            State = 1
                        },
                        new
                        {
                            Id = 15L,
                            Code = "mass_coverage",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6905),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6905),
                            LongText = "Mass coverage",
                            OrganizationId = 1L,
                            ShortText = "Mass coverage",
                            State = 1
                        },
                        new
                        {
                            Id = 16L,
                            Code = "mass_flow",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6907),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6907),
                            LongText = "Mass flow",
                            OrganizationId = 1L,
                            ShortText = "Mass flow",
                            State = 1
                        },
                        new
                        {
                            Id = 17L,
                            Code = "mass_per_energy",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6909),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6910),
                            LongText = "Mass per Energy",
                            OrganizationId = 1L,
                            ShortText = "Mass per Energy",
                            State = 1
                        },
                        new
                        {
                            Id = 18L,
                            Code = "mass_proportion",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6933),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6934),
                            LongText = "Mass proportion",
                            OrganizationId = 1L,
                            ShortText = "Mass proportion",
                            State = 1
                        },
                        new
                        {
                            Id = 19L,
                            Code = "proportion",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6935),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6936),
                            LongText = "Proportion",
                            OrganizationId = 1L,
                            ShortText = "Proportion",
                            State = 1
                        },
                        new
                        {
                            Id = 20L,
                            Code = "time",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6937),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6938),
                            LongText = "Time",
                            OrganizationId = 1L,
                            ShortText = "Time",
                            State = 1
                        },
                        new
                        {
                            Id = 21L,
                            Code = "vaporization_speed",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6939),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6940),
                            LongText = "Vaporization Speed",
                            OrganizationId = 1L,
                            ShortText = "Vaporization Speed",
                            State = 1
                        },
                        new
                        {
                            Id = 22L,
                            Code = "volume",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6941),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6942),
                            LongText = "Volume",
                            OrganizationId = 1L,
                            ShortText = "Volume",
                            State = 1
                        },
                        new
                        {
                            Id = 23L,
                            Code = "volume_proportion",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6943),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6944),
                            LongText = "Volume proportion",
                            OrganizationId = 1L,
                            ShortText = "Volume proportion",
                            State = 1
                        },
                        new
                        {
                            Id = 24L,
                            Code = "volume_rate_of_flow",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6945),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6946),
                            LongText = "Volume rate of flow",
                            OrganizationId = 1L,
                            ShortText = "Volume rate of flow",
                            State = 1
                        },
                        new
                        {
                            Id = 121L,
                            Code = "monetary",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6947),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6948),
                            LongText = "Monetary",
                            OrganizationId = 1L,
                            ShortText = "Monetary",
                            State = 1
                        },
                        new
                        {
                            Id = 126L,
                            Code = "narrative",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6949),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6950),
                            LongText = "Text",
                            OrganizationId = 1L,
                            ShortText = "Text",
                            State = 1
                        },
                        new
                        {
                            Id = 131L,
                            Code = "number",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6951),
                            LanguageId = 1L,
                            LastModifiedBy = 1L,
                            LastModifiedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(6952),
                            LongText = "Number",
                            OrganizationId = 1L,
                            ShortText = "Number",
                            State = 1
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasureTypeTranslation", b =>
                {
                    b.Property<long>("UnitOfMeasureTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LongText")
                        .HasColumnType("text");

                    b.Property<string>("ShortText")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureTypeId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_UnitOfMeasureTypeTranslations_LanguageId");

                    b.ToTable("UnitOfMeasureTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Models.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("DataModelValueId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsDefaultModel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("UploadedFile_pkey");

                    b.HasIndex(new[] { "DataModelValueId" }, "fki_FK_UploadFile_DefaultDataModelValues");

                    b.HasIndex(new[] { "UserId" }, "fki_FK_UploadedFile_User_UserId");

                    b.ToTable("UploadedFile", (string)null);
                });

            modelBuilder.Entity("ESG.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecurityStamp")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_Users_LanguageId");

                    b.HasIndex(new[] { "Id" }, "idx_users_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 101L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7080),
                            Email = "user101@example.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LastName = "Doe",
                            Password = "password101",
                            PhoneNumber = "1234567890",
                            SecurityStamp = new Guid("0f0a2f58-915e-483a-bfd4-284bb0865f56"),
                            State = 0
                        },
                        new
                        {
                            Id = 102L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7083),
                            Email = "user102@example.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LastName = "Doe",
                            Password = "password102",
                            PhoneNumber = "1234567890",
                            SecurityStamp = new Guid("a4e718e6-34b0-4737-98e2-b4e51584ee43"),
                            State = 0
                        },
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7086),
                            Email = "user1@example.com",
                            FirstName = "John",
                            LanguageId = 1L,
                            LastName = "Doe",
                            Password = "password1",
                            PhoneNumber = "1234567890",
                            SecurityStamp = new Guid("8cf25639-53c5-47e3-a88e-46061b5e7d09"),
                            State = 0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 2L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7112),
                            Email = "user2@example.com",
                            FirstName = "Jane",
                            LanguageId = 1L,
                            LastName = "Smith",
                            Password = "password2",
                            PhoneNumber = "0987654321",
                            SecurityStamp = new Guid("0ccb8b58-4eab-4df1-a74d-b851344394e3"),
                            State = 0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 3L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7114),
                            Email = "user3@example.com",
                            FirstName = "Alice",
                            LanguageId = 1L,
                            LastName = "Johnson",
                            Password = "password3",
                            PhoneNumber = "2345678901",
                            SecurityStamp = new Guid("b200386c-f12b-4edc-afd8-2993ba53c5d9"),
                            State = 0
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 4L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7116),
                            Email = "user4@example.com",
                            FirstName = "Bob",
                            LanguageId = 1L,
                            LastName = "Brown",
                            Password = "password4",
                            PhoneNumber = "3456789012",
                            SecurityStamp = new Guid("cf2ca896-6e2c-40ee-930c-c22514c427e3"),
                            State = 0
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 5L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7119),
                            Email = "user5@example.com",
                            FirstName = "Charlie",
                            LanguageId = 1L,
                            LastName = "Davis",
                            Password = "password5",
                            PhoneNumber = "4567890123",
                            SecurityStamp = new Guid("83ecf660-a4b5-462c-aaff-013cc77b753d"),
                            State = 0
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 6L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7127),
                            Email = "user6@example.com",
                            FirstName = "David",
                            LanguageId = 1L,
                            LastName = "Evans",
                            Password = "password6",
                            PhoneNumber = "5678901234",
                            SecurityStamp = new Guid("70565970-31b3-4d7b-8309-bf487b49cb95"),
                            State = 0
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 7L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7130),
                            Email = "user7@example.com",
                            FirstName = "Eve",
                            LanguageId = 1L,
                            LastName = "Foster",
                            Password = "password7",
                            PhoneNumber = "6789012345",
                            SecurityStamp = new Guid("68ebabbd-83d5-401a-951f-150076e84f54"),
                            State = 0
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 8L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7132),
                            Email = "user8@example.com",
                            FirstName = "Frank",
                            LanguageId = 1L,
                            LastName = "Garcia",
                            Password = "password8",
                            PhoneNumber = "7890123456",
                            SecurityStamp = new Guid("bda84007-6627-4171-8de4-b4334068405d"),
                            State = 0
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = 9L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7134),
                            Email = "user9@example.com",
                            FirstName = "Grace",
                            LanguageId = 1L,
                            LastName = "Harris",
                            Password = "password9",
                            PhoneNumber = "8901234567",
                            SecurityStamp = new Guid("cdc36e00-05ab-420e-bde5-24ba6bfcf141"),
                            State = 0
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = 10L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7136),
                            Email = "user10@example.com",
                            FirstName = "Hank",
                            LanguageId = 1L,
                            LastName = "Ivy",
                            Password = "password10",
                            PhoneNumber = "9012345678",
                            SecurityStamp = new Guid("7d3565d4-104c-41e6-ae29-8ed71556e903"),
                            State = 0
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = 11L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7139),
                            Email = "user11@example.com",
                            FirstName = "Irene",
                            LanguageId = 1L,
                            LastName = "James",
                            Password = "password11",
                            PhoneNumber = "0123456789",
                            SecurityStamp = new Guid("fa3e37fc-aa51-496c-8a1b-26647ee7c990"),
                            State = 0
                        },
                        new
                        {
                            Id = 12L,
                            CreatedBy = 12L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7141),
                            Email = "user12@example.com",
                            FirstName = "Jack",
                            LanguageId = 1L,
                            LastName = "Kane",
                            Password = "password12",
                            PhoneNumber = "1234509876",
                            SecurityStamp = new Guid("c2f1a610-7133-43ae-bf27-10fd1002cbf2"),
                            State = 0
                        },
                        new
                        {
                            Id = 13L,
                            CreatedBy = 13L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7143),
                            Email = "user13@example.com",
                            FirstName = "Laura",
                            LanguageId = 1L,
                            LastName = "Mills",
                            Password = "password13",
                            PhoneNumber = "2345610987",
                            SecurityStamp = new Guid("5e414e60-57ec-4be0-9677-c49fb25a0605"),
                            State = 0
                        },
                        new
                        {
                            Id = 14L,
                            CreatedBy = 14L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7147),
                            Email = "user14@example.com",
                            FirstName = "Mike",
                            LanguageId = 1L,
                            LastName = "Nelson",
                            Password = "password14",
                            PhoneNumber = "3456721098",
                            SecurityStamp = new Guid("eb1eae97-9fe9-4ee4-8dc3-07213554cccd"),
                            State = 0
                        },
                        new
                        {
                            Id = 15L,
                            CreatedBy = 15L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7149),
                            Email = "user15@example.com",
                            FirstName = "Nina",
                            LanguageId = 1L,
                            LastName = "Owen",
                            Password = "password15",
                            PhoneNumber = "4567832109",
                            SecurityStamp = new Guid("9639054b-7256-4758-b148-1689e068fe38"),
                            State = 0
                        },
                        new
                        {
                            Id = 16L,
                            CreatedBy = 16L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7152),
                            Email = "user16@example.com",
                            FirstName = "Oliver",
                            LanguageId = 1L,
                            LastName = "Perez",
                            Password = "password16",
                            PhoneNumber = "5678943210",
                            SecurityStamp = new Guid("4a1cab9b-05f2-41e5-952b-3b1d8525e3fd"),
                            State = 0
                        },
                        new
                        {
                            Id = 17L,
                            CreatedBy = 17L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7154),
                            Email = "user17@example.com",
                            FirstName = "Pam",
                            LanguageId = 1L,
                            LastName = "Quinn",
                            Password = "password17",
                            PhoneNumber = "6789054321",
                            SecurityStamp = new Guid("e4fb1112-c504-44ad-b63b-0a1e5c66fea3"),
                            State = 0
                        },
                        new
                        {
                            Id = 18L,
                            CreatedBy = 18L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7156),
                            Email = "user18@example.com",
                            FirstName = "Quinn",
                            LanguageId = 1L,
                            LastName = "Reed",
                            Password = "password18",
                            PhoneNumber = "7890165432",
                            SecurityStamp = new Guid("c0dbbaeb-cb1a-49e1-ba68-76a1cb46f433"),
                            State = 0
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRoles_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRoles_UserId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7000),
                            RoleId = 2L,
                            State = 0,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7001),
                            RoleId = 3L,
                            State = 0,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7002),
                            RoleId = 3L,
                            State = 0,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7003),
                            RoleId = 2L,
                            State = 0,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7004),
                            RoleId = 3L,
                            State = 0,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7005),
                            RoleId = 3L,
                            State = 0,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7006),
                            RoleId = 2L,
                            State = 0,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7007),
                            RoleId = 3L,
                            State = 0,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7008),
                            RoleId = 3L,
                            State = 0,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7009),
                            RoleId = 2L,
                            State = 0,
                            UserId = 10L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7010),
                            RoleId = 3L,
                            State = 0,
                            UserId = 11L
                        },
                        new
                        {
                            Id = 12L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7011),
                            RoleId = 3L,
                            State = 0,
                            UserId = 12L
                        },
                        new
                        {
                            Id = 13L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7012),
                            RoleId = 2L,
                            State = 0,
                            UserId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7013),
                            RoleId = 3L,
                            State = 0,
                            UserId = 14L
                        },
                        new
                        {
                            Id = 15L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7014),
                            RoleId = 3L,
                            State = 0,
                            UserId = 15L
                        },
                        new
                        {
                            Id = 16L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7015),
                            RoleId = 2L,
                            State = 0,
                            UserId = 16L
                        },
                        new
                        {
                            Id = 17L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7016),
                            RoleId = 3L,
                            State = 0,
                            UserId = 17L
                        },
                        new
                        {
                            Id = 18L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7017),
                            RoleId = 3L,
                            State = 0,
                            UserId = 18L
                        },
                        new
                        {
                            Id = 19L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7018),
                            RoleId = 1L,
                            State = 0,
                            UserId = 101L
                        },
                        new
                        {
                            Id = 20L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 11, 29, 9, 51, 37, 666, DateTimeKind.Utc).AddTicks(7019),
                            RoleId = 1L,
                            State = 0,
                            UserId = 102L
                        });
                });

            modelBuilder.Entity("ESG.Domain.Models.Amendment", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataPointValue", "Datapoint")
                        .WithMany("Amendments")
                        .HasForeignKey("DatapointId")
                        .IsRequired()
                        .HasConstraintName("FK_Amendments_DataPointValuesId");

                    b.HasOne("ESG.Domain.Models.ModelFilterCombination", "FilterCombination")
                        .WithMany("Amendments")
                        .HasForeignKey("FilterCombinationId")
                        .HasConstraintName("FK_Amendments1-FilterCombinationId");

                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("Amendments")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Amendments_Organization_OrganizationId");

                    b.Navigation("Datapoint");

                    b.Navigation("FilterCombination");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModel", b =>
                {
                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("DataModels")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModelFilter", b =>
                {
                    b.HasOne("ESG.Domain.Models.DimensionType", "DimensionType")
                        .WithMany("DataModelFilterDimensionTypes")
                        .HasForeignKey("DimensionTypeId");

                    b.HasOne("ESG.Domain.Models.DimensionType", "Filter")
                        .WithMany("DataModelFilterFilters")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.ModelConfiguration", "ModelConfiguration")
                        .WithMany("DataModelFilters")
                        .HasForeignKey("ModelConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("Filter");

                    b.Navigation("ModelConfiguration");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModelValue", b =>
                {
                    b.HasOne("ESG.Domain.Models.User", "AccountableUser")
                        .WithMany("DataModelValueAccountableUsers")
                        .HasForeignKey("AccountableUserId");

                    b.HasOne("ESG.Domain.Models.Dimension", "Column")
                        .WithMany("DataModelValueColumns")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ESG.Domain.Models.ModelFilterCombination", "Combination")
                        .WithMany("DataModelValues")
                        .HasForeignKey("CombinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ESG.Domain.Models.User", "ConsultNavigation")
                        .WithMany("DataModelValueConsultNavigations")
                        .HasForeignKey("Consult");

                    b.HasOne("ESG.Domain.Models.DataModel", "DataModel")
                        .WithMany("DataModelValues")
                        .HasForeignKey("DataModelId")
                        .HasConstraintName("FK_DataModelValues_DataModel_DataModelId");

                    b.HasOne("ESG.Domain.Models.DataPointValue", "DataPointValues")
                        .WithMany("DataModelValues")
                        .HasForeignKey("DataPointValuesId")
                        .HasConstraintName("FK_DataPointValues_DatapointValuesId");

                    b.HasOne("ESG.Domain.Models.User", "InformNavigation")
                        .WithMany("DataModelValueInformNavigations")
                        .HasForeignKey("Inform");

                    b.HasOne("ESG.Domain.Models.User", "ResponsibleUser")
                        .WithMany("DataModelValueResponsibleUsers")
                        .HasForeignKey("ResponsibleUserId");

                    b.HasOne("ESG.Domain.Models.Dimension", "Row")
                        .WithMany("DataModelValueRows")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountableUser");

                    b.Navigation("Column");

                    b.Navigation("Combination");

                    b.Navigation("ConsultNavigation");

                    b.Navigation("DataModel");

                    b.Navigation("DataPointValues");

                    b.Navigation("InformNavigation");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataPointType", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("DataPointTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("DataPointTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataPointValue", b =>
                {
                    b.HasOne("ESG.Domain.Models.Currency", "Currency")
                        .WithMany("DataPointValues")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ESG.Domain.Models.DataPointType", "DatapointType")
                        .WithMany("DataPointValues")
                        .HasForeignKey("DatapointTypeId");

                    b.HasOne("ESG.Domain.Models.DisclosureRequirement", "DisclosureRequirement")
                        .WithMany("DataPointValues")
                        .HasForeignKey("DisclosureRequirementId")
                        .HasConstraintName("FK_DataPointValues_DisclosureRequirement_DisclosureRequirement~");

                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("DataPointValues")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("DataPointValues")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("DataPointValues")
                        .HasForeignKey("UnitOfMeasureId");

                    b.HasOne("ESG.Domain.Models.User", "User")
                        .WithMany("DataPointValues")
                        .HasForeignKey("UserId");

                    b.Navigation("Currency");

                    b.Navigation("DatapointType");

                    b.Navigation("DisclosureRequirement");

                    b.Navigation("Language");

                    b.Navigation("Organization");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESG.Domain.Models.DatapointTypeTranslation", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataPointType", "DatapointType")
                        .WithMany("DatapointTypeTranslations")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.DataPointValue", "DatapointTypeNavigation")
                        .WithMany("DatapointTypeTranslations")
                        .HasForeignKey("DatapointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("DatapointTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatapointType");

                    b.Navigation("DatapointTypeNavigation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Models.DatapointValueTranslation", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataPointValue", "DatapointValue")
                        .WithMany("DatapointValueTranslations")
                        .HasForeignKey("DatapointValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("DatapointValueTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatapointValue");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Models.Dimension", b =>
                {
                    b.HasOne("ESG.Domain.Models.DimensionType", "DimensionType")
                        .WithMany("Dimensions")
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("Dimensions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("Dimensions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Models.DimensionTranslation", b =>
                {
                    b.HasOne("ESG.Domain.Models.Dimension", "Dimensions")
                        .WithMany("DimensionTranslations")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("DimensionTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimensions");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Models.DimensionType", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("DimensionTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("DimensionTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Models.DimensionTypeTranslation", b =>
                {
                    b.HasOne("ESG.Domain.Models.DimensionType", "DimensionType")
                        .WithMany("DimensionTypeTranslations")
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("DimensionTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Models.DisclosureRequirement", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("DisclosureRequirements")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Standard", "Standard")
                        .WithMany("DisclosureRequirements")
                        .HasForeignKey("StandardId");

                    b.Navigation("Language");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("ESG.Domain.Models.Hierarchy", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataPointValue", "DataPointValues")
                        .WithMany("Hierarchies")
                        .HasForeignKey("DataPointValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.Language", b =>
                {
                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("Languages")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelConfiguration", b =>
                {
                    b.HasOne("ESG.Domain.Models.DimensionType", "Column")
                        .WithMany("ModelConfigurationColumns")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ESG.Domain.Models.DataModel", "DataModel")
                        .WithMany("ModelConfigurations")
                        .HasForeignKey("DataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.DimensionType", "Row")
                        .WithMany("ModelConfigurationRows")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");

                    b.Navigation("DataModel");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelDatapoint", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataModel", "DataModel")
                        .WithMany("ModelDatapoints")
                        .HasForeignKey("DataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.DataPointValue", "DatapointValues")
                        .WithMany("ModelDatapoints")
                        .HasForeignKey("DatapointValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataModel");

                    b.Navigation("DatapointValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelDimensionType", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataModel", "DataModel")
                        .WithMany("ModelDimensionTypes")
                        .HasForeignKey("DataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.DimensionType", "DimensionType")
                        .WithMany("ModelDimensionTypes")
                        .HasForeignKey("DimensionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ModelDimensionTypes_DimensionType_DimensionTypeId");

                    b.Navigation("DataModel");

                    b.Navigation("DimensionType");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelDimensionValue", b =>
                {
                    b.HasOne("ESG.Domain.Models.Dimension", "Dimensions")
                        .WithMany("ModelDimensionValues")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.ModelDimensionType", "ModelDimensionTypes")
                        .WithMany("ModelDimensionValues")
                        .HasForeignKey("ModelDimensionTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModelDimensionValues_ModelDimensionTypes_ModelDimensionType~");

                    b.Navigation("Dimensions");

                    b.Navigation("ModelDimensionTypes");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelFilterCombination", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataModel", "DataModel")
                        .WithMany("ModelFilterCombinations")
                        .HasForeignKey("DataModelId")
                        .IsRequired()
                        .HasConstraintName("FK_DataModel_DataModelId");

                    b.Navigation("DataModel");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelFilterCombinationalValue", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataModelFilter", "DataModelFilters")
                        .WithMany("ModelFilterCombinationalValues")
                        .HasForeignKey("DataModelFiltersId")
                        .IsRequired()
                        .HasConstraintName("FK_DataModelFIlters_DatamodelFiltersID");

                    b.HasOne("ESG.Domain.Models.DimensionType", "DimensionType")
                        .WithMany("ModelFilterCombinationalValues")
                        .HasForeignKey("DimensionTypeId")
                        .HasConstraintName("FK_DimensionType_DimensionTypeId");

                    b.HasOne("ESG.Domain.Models.Dimension", "Dimensions")
                        .WithMany("ModelFilterCombinationalValues")
                        .HasForeignKey("DimensionsId")
                        .IsRequired()
                        .HasConstraintName("FK_Dimension_DimensionsId");

                    b.HasOne("ESG.Domain.Models.ModelFilterCombination", "ModelFilterCombinations")
                        .WithMany("ModelFilterCombinationalValues")
                        .HasForeignKey("ModelFilterCombinationsId")
                        .IsRequired()
                        .HasConstraintName("FK_ModelFilterCombination_ModelFilterCombinationId");

                    b.Navigation("DataModelFilters");

                    b.Navigation("DimensionType");

                    b.Navigation("Dimensions");

                    b.Navigation("ModelFilterCombinations");
                });

            modelBuilder.Entity("ESG.Domain.Models.Organization", b =>
                {
                    b.HasOne("ESG.Domain.Models.Tenant", "Tenant")
                        .WithMany("Organizations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ESG.Domain.Models.OrganizationHeirarchy", b =>
                {
                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithOne("OrganizationHeirarchy")
                        .HasForeignKey("ESG.Domain.Models.OrganizationHeirarchy", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Models.OrganizationUser", b =>
                {
                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.User", "User")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESG.Domain.Models.SampleModelFilterCombinationValue", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataModelFilter", "DataModelFilters")
                        .WithMany("SampleModelFilterCombinationValues")
                        .HasForeignKey("DataModelFiltersId")
                        .IsRequired()
                        .HasConstraintName("FK_DataModelFilters_DatamodelFiltersId");

                    b.HasOne("ESG.Domain.Models.Dimension", "Dimensions")
                        .WithMany("SampleModelFilterCombinationValues")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.ModelFilterCombination", "ModelFilterCombinations")
                        .WithMany("SampleModelFilterCombinationValues")
                        .HasForeignKey("ModelFilterCombinationsId")
                        .IsRequired()
                        .HasConstraintName("FK_ModelFlterCombinations_ModelFIlterCombinationsId");

                    b.Navigation("DataModelFilters");

                    b.Navigation("Dimensions");

                    b.Navigation("ModelFilterCombinations");
                });

            modelBuilder.Entity("ESG.Domain.Models.Standard", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("Standards")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Topic", "Topic")
                        .WithMany("Standards")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ESG.Domain.Models.Topic", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("Topics")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasure", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.UnitOfMeasureType", "UnitOfMeasureType")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");

                    b.Navigation("UnitOfMeasureType");
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasureTranslation", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasureType", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("UnitOfMeasureTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.Organization", "Organization")
                        .WithMany("UnitOfMeasureTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasureTypeTranslation", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("UnitOfMeasureTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.UnitOfMeasureType", "UnitOfMeasureType")
                        .WithMany("UnitOfMeasureTypeTranslations")
                        .HasForeignKey("UnitOfMeasureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UnitOfMeasureTypeTranslations_UnitOfMeasureTypes_UnitOfMeas~");

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasureType");
                });

            modelBuilder.Entity("ESG.Domain.Models.UploadedFile", b =>
                {
                    b.HasOne("ESG.Domain.Models.DataModelValue", "DataModelValue")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("DataModelValueId")
                        .HasConstraintName("FK_UploadFile_DefaultDataModelValues");

                    b.HasOne("ESG.Domain.Models.User", "User")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UploadedFile_User_UserId");

                    b.Navigation("DataModelValue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESG.Domain.Models.User", b =>
                {
                    b.HasOne("ESG.Domain.Models.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ESG.Domain.Models.UserRole", b =>
                {
                    b.HasOne("ESG.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESG.Domain.Models.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("ESG.Domain.Models.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESG.Domain.Models.Currency", b =>
                {
                    b.Navigation("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModel", b =>
                {
                    b.Navigation("DataModelValues");

                    b.Navigation("ModelConfigurations");

                    b.Navigation("ModelDatapoints");

                    b.Navigation("ModelDimensionTypes");

                    b.Navigation("ModelFilterCombinations");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModelFilter", b =>
                {
                    b.Navigation("ModelFilterCombinationalValues");

                    b.Navigation("SampleModelFilterCombinationValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataModelValue", b =>
                {
                    b.Navigation("UploadedFiles");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataPointType", b =>
                {
                    b.Navigation("DataPointValues");

                    b.Navigation("DatapointTypeTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Models.DataPointValue", b =>
                {
                    b.Navigation("Amendments");

                    b.Navigation("DataModelValues");

                    b.Navigation("DatapointTypeTranslations");

                    b.Navigation("DatapointValueTranslations");

                    b.Navigation("Hierarchies");

                    b.Navigation("ModelDatapoints");
                });

            modelBuilder.Entity("ESG.Domain.Models.Dimension", b =>
                {
                    b.Navigation("DataModelValueColumns");

                    b.Navigation("DataModelValueRows");

                    b.Navigation("DimensionTranslations");

                    b.Navigation("ModelDimensionValues");

                    b.Navigation("ModelFilterCombinationalValues");

                    b.Navigation("SampleModelFilterCombinationValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.DimensionType", b =>
                {
                    b.Navigation("DataModelFilterDimensionTypes");

                    b.Navigation("DataModelFilterFilters");

                    b.Navigation("DimensionTypeTranslations");

                    b.Navigation("Dimensions");

                    b.Navigation("ModelConfigurationColumns");

                    b.Navigation("ModelConfigurationRows");

                    b.Navigation("ModelDimensionTypes");

                    b.Navigation("ModelFilterCombinationalValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.DisclosureRequirement", b =>
                {
                    b.Navigation("DataPointValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.Language", b =>
                {
                    b.Navigation("DataPointTypes");

                    b.Navigation("DataPointValues");

                    b.Navigation("DatapointTypeTranslations");

                    b.Navigation("DatapointValueTranslations");

                    b.Navigation("DimensionTranslations");

                    b.Navigation("DimensionTypeTranslations");

                    b.Navigation("DimensionTypes");

                    b.Navigation("Dimensions");

                    b.Navigation("DisclosureRequirements");

                    b.Navigation("Standards");

                    b.Navigation("Topics");

                    b.Navigation("UnitOfMeasureTranslations");

                    b.Navigation("UnitOfMeasureTypeTranslations");

                    b.Navigation("UnitOfMeasureTypes");

                    b.Navigation("UnitOfMeasures");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelConfiguration", b =>
                {
                    b.Navigation("DataModelFilters");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelDimensionType", b =>
                {
                    b.Navigation("ModelDimensionValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.ModelFilterCombination", b =>
                {
                    b.Navigation("Amendments");

                    b.Navigation("DataModelValues");

                    b.Navigation("ModelFilterCombinationalValues");

                    b.Navigation("SampleModelFilterCombinationValues");
                });

            modelBuilder.Entity("ESG.Domain.Models.Organization", b =>
                {
                    b.Navigation("Amendments");

                    b.Navigation("DataModels");

                    b.Navigation("DataPointTypes");

                    b.Navigation("DataPointValues");

                    b.Navigation("DimensionTypes");

                    b.Navigation("Dimensions");

                    b.Navigation("Languages");

                    b.Navigation("OrganizationHeirarchy");

                    b.Navigation("OrganizationUsers");

                    b.Navigation("UnitOfMeasureTypes");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ESG.Domain.Models.Standard", b =>
                {
                    b.Navigation("DisclosureRequirements");
                });

            modelBuilder.Entity("ESG.Domain.Models.Tenant", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ESG.Domain.Models.Topic", b =>
                {
                    b.Navigation("Standards");
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasure", b =>
                {
                    b.Navigation("DataPointValues");

                    b.Navigation("UnitOfMeasureTranslations");
                });

            modelBuilder.Entity("ESG.Domain.Models.UnitOfMeasureType", b =>
                {
                    b.Navigation("UnitOfMeasureTypeTranslations");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("ESG.Domain.Models.User", b =>
                {
                    b.Navigation("DataModelValueAccountableUsers");

                    b.Navigation("DataModelValueConsultNavigations");

                    b.Navigation("DataModelValueInformNavigations");

                    b.Navigation("DataModelValueResponsibleUsers");

                    b.Navigation("DataPointValues");

                    b.Navigation("OrganizationUsers");

                    b.Navigation("UploadedFiles");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
